/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "GossipService.h"

#include "GossipService.tcc"

namespace cpp2 {

std::unique_ptr<apache::thrift::AsyncProcessor> GossipServiceSvIf::getProcessor() {
  return std::unique_ptr<apache::thrift::AsyncProcessor>(new GossipServiceAsyncProcessor((GossipServiceSvIf*)this));
}

apache::thrift::concurrency::PriorityThreadManager::PRIORITY GossipServiceSvIf::getprio_ping(apache::thrift::Cpp2RequestContext* reqCtx) {
  apache::thrift::concurrency::PRIORITY prio41 = reqCtx->getCallPriority();
  if (prio41 != apache::thrift::concurrency::N_PRIORITIES) {
    return prio41;
  }
  return apache::thrift::concurrency::NORMAL;
}

void GossipServiceSvIf::ping() {
  throw apache::thrift::TApplicationException("Function ping is unimplemented");
}

void GossipServiceSvIf::async_tm_ping(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback) {
  auto callbackp = callback.release();
  setConnectionContext(callbackp->getConnectionContext());
  try {
    ping();
    callbackp->doneInThread();
  } catch(const std::exception& ex) {
    callbackp->exceptionInThread(std::current_exception());
  }
  setConnectionContext(nullptr);
}

apache::thrift::concurrency::PriorityThreadManager::PRIORITY GossipServiceSvIf::getprio_joinCluster(apache::thrift::Cpp2RequestContext* reqCtx) {
  apache::thrift::concurrency::PRIORITY prio42 = reqCtx->getCallPriority();
  if (prio42 != apache::thrift::concurrency::N_PRIORITIES) {
    return prio42;
  }
  return apache::thrift::concurrency::NORMAL;
}

void GossipServiceSvIf::joinCluster(std::set< ::cpp2::GossipState>& _return, std::unique_ptr< ::cpp2::GossipNode> self) {
  throw apache::thrift::TApplicationException("Function joinCluster is unimplemented");
}

void GossipServiceSvIf::async_tm_joinCluster(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::set< ::cpp2::GossipState>>>> callback, std::unique_ptr< ::cpp2::GossipNode> self) {
  auto callbackp = callback.release();
  setConnectionContext(callbackp->getConnectionContext());
  try {
    std::unique_ptr<std::set< ::cpp2::GossipState>> _return(new std::set< ::cpp2::GossipState>);
    joinCluster(*_return, std::move(self));
    callbackp->resultInThread(std::move(_return));
  } catch(const std::exception& ex) {
    callbackp->exceptionInThread(std::current_exception());
  }
  setConnectionContext(nullptr);
}

apache::thrift::concurrency::PriorityThreadManager::PRIORITY GossipServiceSvIf::getprio_sendUpdate(apache::thrift::Cpp2RequestContext* reqCtx) {
  apache::thrift::concurrency::PRIORITY prio43 = reqCtx->getCallPriority();
  if (prio43 != apache::thrift::concurrency::N_PRIORITIES) {
    return prio43;
  }
  return apache::thrift::concurrency::NORMAL;
}

void GossipServiceSvIf::sendUpdate( ::cpp2::GossipState& _return, std::unique_ptr< ::cpp2::GossipState> state) {
  throw apache::thrift::TApplicationException("Function sendUpdate is unimplemented");
}

void GossipServiceSvIf::async_tm_sendUpdate(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::cpp2::GossipState>>> callback, std::unique_ptr< ::cpp2::GossipState> state) {
  auto callbackp = callback.release();
  setConnectionContext(callbackp->getConnectionContext());
  try {
    std::unique_ptr< ::cpp2::GossipState> _return(new  ::cpp2::GossipState);
    sendUpdate(*_return, std::move(state));
    callbackp->resultInThread(std::move(_return));
  } catch(const std::exception& ex) {
    callbackp->exceptionInThread(std::current_exception());
  }
  setConnectionContext(nullptr);
}

apache::thrift::concurrency::PriorityThreadManager::PRIORITY GossipServiceSvIf::getprio_sendStatusUpdate(apache::thrift::Cpp2RequestContext* reqCtx) {
  apache::thrift::concurrency::PRIORITY prio44 = reqCtx->getCallPriority();
  if (prio44 != apache::thrift::concurrency::N_PRIORITIES) {
    return prio44;
  }
  return apache::thrift::concurrency::NORMAL;
}

void GossipServiceSvIf::sendStatusUpdate( ::cpp2::GossipState& _return, std::unique_ptr< ::cpp2::GossipState> state, std::unique_ptr< ::cpp2::GossipState> oldState, std::unique_ptr< ::cpp2::GossipState> newState) {
  throw apache::thrift::TApplicationException("Function sendStatusUpdate is unimplemented");
}

void GossipServiceSvIf::async_tm_sendStatusUpdate(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::cpp2::GossipState>>> callback, std::unique_ptr< ::cpp2::GossipState> state, std::unique_ptr< ::cpp2::GossipState> oldState, std::unique_ptr< ::cpp2::GossipState> newState) {
  auto callbackp = callback.release();
  setConnectionContext(callbackp->getConnectionContext());
  try {
    std::unique_ptr< ::cpp2::GossipState> _return(new  ::cpp2::GossipState);
    sendStatusUpdate(*_return, std::move(state), std::move(oldState), std::move(newState));
    callbackp->resultInThread(std::move(_return));
  } catch(const std::exception& ex) {
    callbackp->exceptionInThread(std::current_exception());
  }
  setConnectionContext(nullptr);
}

void GossipServiceSvNull::ping() {}

void GossipServiceSvNull::joinCluster(std::set< ::cpp2::GossipState>& _return, std::unique_ptr< ::cpp2::GossipNode> self) {}

void GossipServiceSvNull::sendUpdate( ::cpp2::GossipState& _return, std::unique_ptr< ::cpp2::GossipState> state) {}

void GossipServiceSvNull::sendStatusUpdate( ::cpp2::GossipState& _return, std::unique_ptr< ::cpp2::GossipState> state, std::unique_ptr< ::cpp2::GossipState> oldState, std::unique_ptr< ::cpp2::GossipState> newState) {}

std::string GossipServiceAsyncProcessor::getServiceName() {
  return "GossipService";
}

void GossipServiceAsyncProcessor::process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType,apache::thrift::Cpp2RequestContext* context,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  std::string fname;
  apache::thrift::MessageType mtype;
  int32_t protoSeqId = 0;
  switch(protType) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      std::unique_ptr<apache::thrift::BinaryProtocolReader> iprot(new apache::thrift::BinaryProtocolReader());
      iprot->setInput(buf.get());
      try {
        iprot->readMessageBegin(fname, mtype, protoSeqId);
      } catch(const apache::thrift::TException& ex) {
        LOG(ERROR) << "received invalid message from client: " << ex.what();
        apache::thrift::BinaryProtocolWriter prot;
        if (req) {
          LOG(ERROR) << "invalid message from client" << " in function process";
          apache::thrift::TApplicationException x("invalid message from client");
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << "invalid message from client" << " in oneway function process";
        }
        return;
      }
      if (mtype != apache::thrift::T_CALL && mtype != apache::thrift::T_ONEWAY) {
        LOG(ERROR) << "received invalid message of type " << mtype;
        apache::thrift::BinaryProtocolWriter prot;
        if (req) {
          LOG(ERROR) << "invalid message arguments" << " in function process";
          apache::thrift::TApplicationException x("invalid message arguments");
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << "invalid message arguments" << " in oneway function process";
        }
      }
      auto pfn = binaryProcessMap_.find(fname);
      if (pfn == binaryProcessMap_.end()) {
        const std::string exMsg = folly::stringPrintf( "Method name %s not found", fname.c_str());
        apache::thrift::BinaryProtocolWriter prot;
        if (req) {
          LOG(ERROR) << exMsg << " in function process";
          apache::thrift::TApplicationException x(exMsg);
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << exMsg << " in oneway function process";
        }
        return;
      }
      (this->*(pfn->second))(std::move(req), std::move(buf), std::move(iprot), context, eb, tm);
      return;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      std::unique_ptr<apache::thrift::CompactProtocolReader> iprot(new apache::thrift::CompactProtocolReader());
      iprot->setInput(buf.get());
      try {
        iprot->readMessageBegin(fname, mtype, protoSeqId);
      } catch(const apache::thrift::TException& ex) {
        LOG(ERROR) << "received invalid message from client: " << ex.what();
        apache::thrift::CompactProtocolWriter prot;
        if (req) {
          LOG(ERROR) << "invalid message from client" << " in function process";
          apache::thrift::TApplicationException x("invalid message from client");
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << "invalid message from client" << " in oneway function process";
        }
        return;
      }
      if (mtype != apache::thrift::T_CALL && mtype != apache::thrift::T_ONEWAY) {
        LOG(ERROR) << "received invalid message of type " << mtype;
        apache::thrift::CompactProtocolWriter prot;
        if (req) {
          LOG(ERROR) << "invalid message arguments" << " in function process";
          apache::thrift::TApplicationException x("invalid message arguments");
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << "invalid message arguments" << " in oneway function process";
        }
      }
      auto pfn = compactProcessMap_.find(fname);
      if (pfn == compactProcessMap_.end()) {
        const std::string exMsg = folly::stringPrintf( "Method name %s not found", fname.c_str());
        apache::thrift::CompactProtocolWriter prot;
        if (req) {
          LOG(ERROR) << exMsg << " in function process";
          apache::thrift::TApplicationException x(exMsg);
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << exMsg << " in oneway function process";
        }
        return;
      }
      (this->*(pfn->second))(std::move(req), std::move(buf), std::move(iprot), context, eb, tm);
      return;
    }
    default:
    {
      LOG(ERROR) << "invalid protType: " << protType;
      return;
      break;
    }
  }
}

bool GossipServiceAsyncProcessor::isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) {
  std::string fname;
  apache::thrift::MessageType mtype;
  int32_t protoSeqId = 0;
  apache::thrift::protocol::PROTOCOL_TYPES protType = static_cast<apache::thrift::protocol::PROTOCOL_TYPES>(header->getProtocolId());
  switch(protType) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader iprot;
      iprot.setInput(buf);
      try {
        iprot.readMessageBegin(fname, mtype, protoSeqId);
        auto it = onewayMethods.find(fname);
        return it != onewayMethods.end();
      } catch(const apache::thrift::TException& ex) {
        LOG(ERROR) << "received invalid message from client: " << ex.what();
        return false;
      }
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader iprot;
      iprot.setInput(buf);
      try {
        iprot.readMessageBegin(fname, mtype, protoSeqId);
        auto it = onewayMethods.find(fname);
        return it != onewayMethods.end();
      } catch(const apache::thrift::TException& ex) {
        LOG(ERROR) << "received invalid message from client: " << ex.what();
        return false;
      }
    }
    default:
    {
      LOG(ERROR) << "invalid protType: " << protType;
      break;
    }
  }
  return false;
}

std::unordered_set<std::string> GossipServiceAsyncProcessor::onewayMethods {};
GossipServiceAsyncProcessor::binaryProcessMap GossipServiceAsyncProcessor::binaryProcessMap_ {
  {"ping", &GossipServiceAsyncProcessor::_processInThread_ping<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"joinCluster", &GossipServiceAsyncProcessor::_processInThread_joinCluster<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"sendUpdate", &GossipServiceAsyncProcessor::_processInThread_sendUpdate<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"sendStatusUpdate", &GossipServiceAsyncProcessor::_processInThread_sendStatusUpdate<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}
};
GossipServiceAsyncProcessor::compactProcessMap GossipServiceAsyncProcessor::compactProcessMap_ {
  {"ping", &GossipServiceAsyncProcessor::_processInThread_ping<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"joinCluster", &GossipServiceAsyncProcessor::_processInThread_joinCluster<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"sendUpdate", &GossipServiceAsyncProcessor::_processInThread_sendUpdate<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"sendStatusUpdate", &GossipServiceAsyncProcessor::_processInThread_sendStatusUpdate<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>}
};

std::string GossipServiceAsyncClient::getServiceName() {
  return "GossipService";
}

void GossipServiceAsyncClient::ping(std::unique_ptr<apache::thrift::RequestCallback> callback) {
  ping(::apache::thrift::RpcOptions(), std::move(callback));
}

void GossipServiceAsyncClient::callback_ping(std::unique_ptr<apache::thrift::RequestCallback> callback) {
  ping(::apache::thrift::RpcOptions(), std::move(callback));
}

void GossipServiceAsyncClient::ping(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      pingT(&writer, rpcOptions, std::move(callback));
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      pingT(&writer, rpcOptions, std::move(callback));
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void GossipServiceAsyncClient::sync_ping() {
  sync_ping(::apache::thrift::RpcOptions());
}

void GossipServiceAsyncClient::sync_ping(const apache::thrift::RpcOptions& rpcOptions) {
  apache::thrift::ClientReceiveState _returnState;
  std::unique_ptr<apache::thrift::RequestCallback> callback45(new apache::thrift::ClientSyncCallback(&_returnState, getChannel()->getEventBase(), false));
  ping(rpcOptions, std::move(callback45));
  getChannel()->getEventBase()->loopForever();
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  recv_ping(_returnState);
}

void GossipServiceAsyncClient::ping(std::function<void (::apache::thrift::ClientReceiveState&&)> callback) {
  ping(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))));
}

void GossipServiceAsyncClient::functor_ping(std::function<void (::apache::thrift::ClientReceiveState&&)> callback) {
  ping(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))));
}

folly::wangle::Future<void> GossipServiceAsyncClient::future_ping() {
  return future_ping(::apache::thrift::RpcOptions());
}

folly::wangle::Future<void> GossipServiceAsyncClient::future_ping(const apache::thrift::RpcOptions& rpcOptions) {
  folly::wangle::Promise<void> promise46;
  auto future47 = promise46.getFuture();
  std::unique_ptr<apache::thrift::RequestCallback> callback48(new apache::thrift::FutureCallback<void>(std::move(promise46), false));
  ping(rpcOptions, std::move(callback48));
  return std::move(future47);
}

folly::exception_wrapper GossipServiceAsyncClient::recv_wrapped_ping(::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_pingT(&reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_pingT(&reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void GossipServiceAsyncClient::recv_ping(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_ping(state);
  if (ew) {
    ew.throwException();
  }
}

void GossipServiceAsyncClient::recv_instance_ping(::apache::thrift::ClientReceiveState& state) {
  recv_ping(state);
}

folly::exception_wrapper GossipServiceAsyncClient::recv_instance_wrapped_ping(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_ping(state);
}

void GossipServiceAsyncClient::joinCluster(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipNode& self) {
  joinCluster(::apache::thrift::RpcOptions(), std::move(callback), self);
}

void GossipServiceAsyncClient::callback_joinCluster(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipNode& self) {
  joinCluster(::apache::thrift::RpcOptions(), std::move(callback), self);
}

void GossipServiceAsyncClient::joinCluster(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipNode& self) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      joinClusterT(&writer, rpcOptions, std::move(callback), self);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      joinClusterT(&writer, rpcOptions, std::move(callback), self);
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void GossipServiceAsyncClient::sync_joinCluster(std::set< ::cpp2::GossipState>& _return, const  ::cpp2::GossipNode& self) {
  sync_joinCluster(::apache::thrift::RpcOptions(), _return, self);
}

void GossipServiceAsyncClient::sync_joinCluster(const apache::thrift::RpcOptions& rpcOptions, std::set< ::cpp2::GossipState>& _return, const  ::cpp2::GossipNode& self) {
  apache::thrift::ClientReceiveState _returnState;
  std::unique_ptr<apache::thrift::RequestCallback> callback50(new apache::thrift::ClientSyncCallback(&_returnState, getChannel()->getEventBase(), false));
  joinCluster(rpcOptions, std::move(callback50), self);
  getChannel()->getEventBase()->loopForever();
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  recv_joinCluster(_return, _returnState);
}

void GossipServiceAsyncClient::joinCluster(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::cpp2::GossipNode& self) {
  joinCluster(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))),self);
}

void GossipServiceAsyncClient::functor_joinCluster(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::cpp2::GossipNode& self) {
  joinCluster(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))),self);
}

folly::wangle::Future<std::set< ::cpp2::GossipState>> GossipServiceAsyncClient::future_joinCluster(const  ::cpp2::GossipNode& self) {
  return future_joinCluster(::apache::thrift::RpcOptions(), self);
}

folly::wangle::Future<std::set< ::cpp2::GossipState>> GossipServiceAsyncClient::future_joinCluster(const apache::thrift::RpcOptions& rpcOptions, const  ::cpp2::GossipNode& self) {
  folly::wangle::Promise<std::set< ::cpp2::GossipState>> promise51;
  auto future52 = promise51.getFuture();
  std::unique_ptr<apache::thrift::RequestCallback> callback53(new apache::thrift::FutureCallback<std::set< ::cpp2::GossipState>>(std::move(promise51), recv_joinCluster));
  joinCluster(rpcOptions, std::move(callback53), self);
  return std::move(future52);
}

folly::exception_wrapper GossipServiceAsyncClient::recv_wrapped_joinCluster(std::set< ::cpp2::GossipState>& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_joinClusterT(&reader, _return, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_joinClusterT(&reader, _return, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void GossipServiceAsyncClient::recv_joinCluster(std::set< ::cpp2::GossipState>& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_joinCluster(_return, state);
  if (ew) {
    ew.throwException();
  }
}

void GossipServiceAsyncClient::recv_instance_joinCluster(std::set< ::cpp2::GossipState>& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_joinCluster(_return, state);
}

folly::exception_wrapper GossipServiceAsyncClient::recv_instance_wrapped_joinCluster(std::set< ::cpp2::GossipState>& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_joinCluster(_return, state);
}

void GossipServiceAsyncClient::sendUpdate(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipState& state) {
  sendUpdate(::apache::thrift::RpcOptions(), std::move(callback), state);
}

void GossipServiceAsyncClient::callback_sendUpdate(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipState& state) {
  sendUpdate(::apache::thrift::RpcOptions(), std::move(callback), state);
}

void GossipServiceAsyncClient::sendUpdate(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipState& state) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      sendUpdateT(&writer, rpcOptions, std::move(callback), state);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      sendUpdateT(&writer, rpcOptions, std::move(callback), state);
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void GossipServiceAsyncClient::sync_sendUpdate( ::cpp2::GossipState& _return, const  ::cpp2::GossipState& state) {
  sync_sendUpdate(::apache::thrift::RpcOptions(), _return, state);
}

void GossipServiceAsyncClient::sync_sendUpdate(const apache::thrift::RpcOptions& rpcOptions,  ::cpp2::GossipState& _return, const  ::cpp2::GossipState& state) {
  apache::thrift::ClientReceiveState _returnState;
  std::unique_ptr<apache::thrift::RequestCallback> callback55(new apache::thrift::ClientSyncCallback(&_returnState, getChannel()->getEventBase(), false));
  sendUpdate(rpcOptions, std::move(callback55), state);
  getChannel()->getEventBase()->loopForever();
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  recv_sendUpdate(_return, _returnState);
}

void GossipServiceAsyncClient::sendUpdate(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::cpp2::GossipState& state) {
  sendUpdate(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))),state);
}

void GossipServiceAsyncClient::functor_sendUpdate(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::cpp2::GossipState& state) {
  sendUpdate(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))),state);
}

folly::wangle::Future< ::cpp2::GossipState> GossipServiceAsyncClient::future_sendUpdate(const  ::cpp2::GossipState& state) {
  return future_sendUpdate(::apache::thrift::RpcOptions(), state);
}

folly::wangle::Future< ::cpp2::GossipState> GossipServiceAsyncClient::future_sendUpdate(const apache::thrift::RpcOptions& rpcOptions, const  ::cpp2::GossipState& state) {
  folly::wangle::Promise< ::cpp2::GossipState> promise56;
  auto future57 = promise56.getFuture();
  std::unique_ptr<apache::thrift::RequestCallback> callback58(new apache::thrift::FutureCallback< ::cpp2::GossipState>(std::move(promise56), recv_sendUpdate));
  sendUpdate(rpcOptions, std::move(callback58), state);
  return std::move(future57);
}

folly::exception_wrapper GossipServiceAsyncClient::recv_wrapped_sendUpdate( ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_sendUpdateT(&reader, _return, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_sendUpdateT(&reader, _return, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void GossipServiceAsyncClient::recv_sendUpdate( ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_sendUpdate(_return, state);
  if (ew) {
    ew.throwException();
  }
}

void GossipServiceAsyncClient::recv_instance_sendUpdate( ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_sendUpdate(_return, state);
}

folly::exception_wrapper GossipServiceAsyncClient::recv_instance_wrapped_sendUpdate( ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_sendUpdate(_return, state);
}

void GossipServiceAsyncClient::sendStatusUpdate(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipState& state, const  ::cpp2::GossipState& oldState, const  ::cpp2::GossipState& newState) {
  sendStatusUpdate(::apache::thrift::RpcOptions(), std::move(callback), state, oldState, newState);
}

void GossipServiceAsyncClient::callback_sendStatusUpdate(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipState& state, const  ::cpp2::GossipState& oldState, const  ::cpp2::GossipState& newState) {
  sendStatusUpdate(::apache::thrift::RpcOptions(), std::move(callback), state, oldState, newState);
}

void GossipServiceAsyncClient::sendStatusUpdate(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipState& state, const  ::cpp2::GossipState& oldState, const  ::cpp2::GossipState& newState) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      sendStatusUpdateT(&writer, rpcOptions, std::move(callback), state, oldState, newState);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      sendStatusUpdateT(&writer, rpcOptions, std::move(callback), state, oldState, newState);
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void GossipServiceAsyncClient::sync_sendStatusUpdate( ::cpp2::GossipState& _return, const  ::cpp2::GossipState& state, const  ::cpp2::GossipState& oldState, const  ::cpp2::GossipState& newState) {
  sync_sendStatusUpdate(::apache::thrift::RpcOptions(), _return, state, oldState, newState);
}

void GossipServiceAsyncClient::sync_sendStatusUpdate(const apache::thrift::RpcOptions& rpcOptions,  ::cpp2::GossipState& _return, const  ::cpp2::GossipState& state, const  ::cpp2::GossipState& oldState, const  ::cpp2::GossipState& newState) {
  apache::thrift::ClientReceiveState _returnState;
  std::unique_ptr<apache::thrift::RequestCallback> callback60(new apache::thrift::ClientSyncCallback(&_returnState, getChannel()->getEventBase(), false));
  sendStatusUpdate(rpcOptions, std::move(callback60), state, oldState, newState);
  getChannel()->getEventBase()->loopForever();
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  recv_sendStatusUpdate(_return, _returnState);
}

void GossipServiceAsyncClient::sendStatusUpdate(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::cpp2::GossipState& state, const  ::cpp2::GossipState& oldState, const  ::cpp2::GossipState& newState) {
  sendStatusUpdate(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))),state,oldState,newState);
}

void GossipServiceAsyncClient::functor_sendStatusUpdate(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::cpp2::GossipState& state, const  ::cpp2::GossipState& oldState, const  ::cpp2::GossipState& newState) {
  sendStatusUpdate(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))),state,oldState,newState);
}

folly::wangle::Future< ::cpp2::GossipState> GossipServiceAsyncClient::future_sendStatusUpdate(const  ::cpp2::GossipState& state, const  ::cpp2::GossipState& oldState, const  ::cpp2::GossipState& newState) {
  return future_sendStatusUpdate(::apache::thrift::RpcOptions(), state, oldState, newState);
}

folly::wangle::Future< ::cpp2::GossipState> GossipServiceAsyncClient::future_sendStatusUpdate(const apache::thrift::RpcOptions& rpcOptions, const  ::cpp2::GossipState& state, const  ::cpp2::GossipState& oldState, const  ::cpp2::GossipState& newState) {
  folly::wangle::Promise< ::cpp2::GossipState> promise61;
  auto future62 = promise61.getFuture();
  std::unique_ptr<apache::thrift::RequestCallback> callback63(new apache::thrift::FutureCallback< ::cpp2::GossipState>(std::move(promise61), recv_sendStatusUpdate));
  sendStatusUpdate(rpcOptions, std::move(callback63), state, oldState, newState);
  return std::move(future62);
}

folly::exception_wrapper GossipServiceAsyncClient::recv_wrapped_sendStatusUpdate( ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_sendStatusUpdateT(&reader, _return, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_sendStatusUpdateT(&reader, _return, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void GossipServiceAsyncClient::recv_sendStatusUpdate( ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_sendStatusUpdate(_return, state);
  if (ew) {
    ew.throwException();
  }
}

void GossipServiceAsyncClient::recv_instance_sendStatusUpdate( ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_sendStatusUpdate(_return, state);
}

folly::exception_wrapper GossipServiceAsyncClient::recv_instance_wrapped_sendStatusUpdate( ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_sendStatusUpdate(_return, state);
}

template uint32_t GossipService_ping_args::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GossipService_ping_args::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_ping_args::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_ping_args::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_ping_args::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GossipService_ping_args::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_ping_args::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_ping_args::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_ping_args::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GossipService_ping_args::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

bool GossipService_ping_args::operator==(const GossipService_ping_args& /* rhs */) const {
  return true;
}

template uint32_t GossipService_ping_pargs::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GossipService_ping_pargs::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_ping_pargs::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_ping_pargs::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_ping_pargs::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GossipService_ping_pargs::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_ping_pargs::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_ping_pargs::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_ping_pargs::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GossipService_ping_pargs::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t GossipService_ping_presult::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GossipService_ping_presult::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_ping_presult::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_ping_presult::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_ping_presult::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GossipService_ping_presult::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_ping_presult::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_ping_presult::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_ping_presult::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GossipService_ping_presult::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t GossipService_ping_result::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GossipService_ping_result::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_ping_result::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_ping_result::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_ping_result::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GossipService_ping_result::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_ping_result::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_ping_result::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_ping_result::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GossipService_ping_result::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

bool GossipService_ping_result::operator==(const GossipService_ping_result& /* rhs */) const {
  return true;
}

template uint32_t GossipService_joinCluster_args::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GossipService_joinCluster_args::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_joinCluster_args::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_joinCluster_args::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_joinCluster_args::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GossipService_joinCluster_args::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_joinCluster_args::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_joinCluster_args::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_joinCluster_args::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GossipService_joinCluster_args::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void GossipService_joinCluster_args::__clear() {
  ::apache::thrift::Cpp2Ops<  ::cpp2::GossipNode>::clear(&self);
  __isset.__clear();
}

bool GossipService_joinCluster_args::operator==(const GossipService_joinCluster_args& rhs) const {
  if (!((self == rhs.self))) {
    return false;
  }
  return true;
}

template uint32_t GossipService_joinCluster_pargs::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GossipService_joinCluster_pargs::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_joinCluster_pargs::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_joinCluster_pargs::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_joinCluster_pargs::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GossipService_joinCluster_pargs::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_joinCluster_pargs::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_joinCluster_pargs::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_joinCluster_pargs::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GossipService_joinCluster_pargs::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t GossipService_joinCluster_presult::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GossipService_joinCluster_presult::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_joinCluster_presult::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_joinCluster_presult::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_joinCluster_presult::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GossipService_joinCluster_presult::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_joinCluster_presult::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_joinCluster_presult::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_joinCluster_presult::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GossipService_joinCluster_presult::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t GossipService_joinCluster_result::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GossipService_joinCluster_result::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_joinCluster_result::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_joinCluster_result::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_joinCluster_result::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GossipService_joinCluster_result::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_joinCluster_result::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_joinCluster_result::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_joinCluster_result::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GossipService_joinCluster_result::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void GossipService_joinCluster_result::__clear() {
  success.clear();
  __isset.__clear();
}

bool GossipService_joinCluster_result::operator==(const GossipService_joinCluster_result& rhs) const {
  if (!((success == rhs.success))) {
    return false;
  }
  return true;
}

template uint32_t GossipService_sendUpdate_args::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GossipService_sendUpdate_args::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_args::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_args::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_args::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GossipService_sendUpdate_args::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_args::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_args::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_args::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_args::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void GossipService_sendUpdate_args::__clear() {
  ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::clear(&state);
  __isset.__clear();
}

bool GossipService_sendUpdate_args::operator==(const GossipService_sendUpdate_args& rhs) const {
  if (!((state == rhs.state))) {
    return false;
  }
  return true;
}

template uint32_t GossipService_sendUpdate_pargs::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GossipService_sendUpdate_pargs::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_pargs::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_pargs::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_pargs::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GossipService_sendUpdate_pargs::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_pargs::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_pargs::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_pargs::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_pargs::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t GossipService_sendUpdate_presult::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GossipService_sendUpdate_presult::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_presult::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_presult::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_presult::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GossipService_sendUpdate_presult::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_presult::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_presult::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_presult::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_presult::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t GossipService_sendUpdate_result::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GossipService_sendUpdate_result::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_result::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_result::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_result::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GossipService_sendUpdate_result::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_result::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_result::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_result::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GossipService_sendUpdate_result::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void GossipService_sendUpdate_result::__clear() {
  ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::clear(&success);
  __isset.__clear();
}

bool GossipService_sendUpdate_result::operator==(const GossipService_sendUpdate_result& rhs) const {
  if (!((success == rhs.success))) {
    return false;
  }
  return true;
}

template uint32_t GossipService_sendStatusUpdate_args::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GossipService_sendStatusUpdate_args::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_args::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_args::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_args::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GossipService_sendStatusUpdate_args::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_args::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_args::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_args::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_args::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void GossipService_sendStatusUpdate_args::__clear() {
  ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::clear(&state);
  ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::clear(&oldState);
  ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::clear(&newState);
  __isset.__clear();
}

bool GossipService_sendStatusUpdate_args::operator==(const GossipService_sendStatusUpdate_args& rhs) const {
  if (!((state == rhs.state))) {
    return false;
  }
  if (!((oldState == rhs.oldState))) {
    return false;
  }
  if (!((newState == rhs.newState))) {
    return false;
  }
  return true;
}

template uint32_t GossipService_sendStatusUpdate_pargs::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GossipService_sendStatusUpdate_pargs::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_pargs::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_pargs::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_pargs::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GossipService_sendStatusUpdate_pargs::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_pargs::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_pargs::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_pargs::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_pargs::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t GossipService_sendStatusUpdate_presult::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GossipService_sendStatusUpdate_presult::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_presult::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_presult::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_presult::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GossipService_sendStatusUpdate_presult::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_presult::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_presult::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_presult::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_presult::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t GossipService_sendStatusUpdate_result::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GossipService_sendStatusUpdate_result::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_result::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_result::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_result::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GossipService_sendStatusUpdate_result::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_result::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_result::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_result::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GossipService_sendStatusUpdate_result::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void GossipService_sendStatusUpdate_result::__clear() {
  ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::clear(&success);
  __isset.__clear();
}

bool GossipService_sendStatusUpdate_result::operator==(const GossipService_sendStatusUpdate_result& rhs) const {
  if (!((success == rhs.success))) {
    return false;
  }
  return true;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift