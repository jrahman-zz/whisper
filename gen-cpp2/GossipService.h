/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/ServiceIncludes.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp2/async/FutureRequest.h>
#include <folly/wangle/futures/Future.h>
#include "Gossip_types.h"
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>



namespace cpp2 {

class GossipServiceSvAsyncIf {
 public:
  virtual ~GossipServiceSvAsyncIf() {}
  virtual void async_tm_ping(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback) = 0;
  virtual void async_ping(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback) = delete;
  virtual void async_tm_joinCluster(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::set< ::cpp2::GossipState>>>> callback, std::unique_ptr< ::cpp2::GossipNode> self) = 0;
  virtual void async_joinCluster(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::set< ::cpp2::GossipState>>>> callback, std::unique_ptr< ::cpp2::GossipNode> self) = delete;
  virtual void async_tm_sendUpdate(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::cpp2::GossipState>>> callback, std::unique_ptr< ::cpp2::GossipState> state) = 0;
  virtual void async_sendUpdate(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::cpp2::GossipState>>> callback, std::unique_ptr< ::cpp2::GossipState> state) = delete;
  virtual void async_tm_sendStatusUpdate(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::cpp2::GossipState>>> callback, std::unique_ptr< ::cpp2::GossipState> state, std::unique_ptr< ::cpp2::GossipState> oldState, std::unique_ptr< ::cpp2::GossipState> newState) = 0;
  virtual void async_sendStatusUpdate(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::cpp2::GossipState>>> callback, std::unique_ptr< ::cpp2::GossipState> state, std::unique_ptr< ::cpp2::GossipState> oldState, std::unique_ptr< ::cpp2::GossipState> newState) = delete;
};

class GossipServiceAsyncProcessor;

class GossipServiceSvIf : public GossipServiceSvAsyncIf, public apache::thrift::ServerInterface {
 public:
  typedef GossipServiceAsyncProcessor ProcessorType;

  virtual ~GossipServiceSvIf() {}
  virtual std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor();
  apache::thrift::concurrency::PriorityThreadManager::PRIORITY getprio_ping(apache::thrift::Cpp2RequestContext* reqCtx);
  virtual void ping();
  virtual void async_tm_ping(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback);
  apache::thrift::concurrency::PriorityThreadManager::PRIORITY getprio_joinCluster(apache::thrift::Cpp2RequestContext* reqCtx);
  virtual void joinCluster(std::set< ::cpp2::GossipState>& _return, std::unique_ptr< ::cpp2::GossipNode> self);
  virtual void async_tm_joinCluster(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::set< ::cpp2::GossipState>>>> callback, std::unique_ptr< ::cpp2::GossipNode> self);
  apache::thrift::concurrency::PriorityThreadManager::PRIORITY getprio_sendUpdate(apache::thrift::Cpp2RequestContext* reqCtx);
  virtual void sendUpdate( ::cpp2::GossipState& _return, std::unique_ptr< ::cpp2::GossipState> state);
  virtual void async_tm_sendUpdate(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::cpp2::GossipState>>> callback, std::unique_ptr< ::cpp2::GossipState> state);
  apache::thrift::concurrency::PriorityThreadManager::PRIORITY getprio_sendStatusUpdate(apache::thrift::Cpp2RequestContext* reqCtx);
  virtual void sendStatusUpdate( ::cpp2::GossipState& _return, std::unique_ptr< ::cpp2::GossipState> state, std::unique_ptr< ::cpp2::GossipState> oldState, std::unique_ptr< ::cpp2::GossipState> newState);
  virtual void async_tm_sendStatusUpdate(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::cpp2::GossipState>>> callback, std::unique_ptr< ::cpp2::GossipState> state, std::unique_ptr< ::cpp2::GossipState> oldState, std::unique_ptr< ::cpp2::GossipState> newState);
};

class GossipServiceSvNull : public GossipServiceSvIf {
 public:
  virtual ~GossipServiceSvNull() {}
  virtual void ping();
  virtual void joinCluster(std::set< ::cpp2::GossipState>& _return, std::unique_ptr< ::cpp2::GossipNode> self);
  virtual void sendUpdate( ::cpp2::GossipState& _return, std::unique_ptr< ::cpp2::GossipState> state);
  virtual void sendStatusUpdate( ::cpp2::GossipState& _return, std::unique_ptr< ::cpp2::GossipState> state, std::unique_ptr< ::cpp2::GossipState> oldState, std::unique_ptr< ::cpp2::GossipState> newState);
};

class GossipServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessor {
 public:
  virtual std::string getServiceName();
 protected:
  GossipServiceSvIf* iface_;
  virtual void process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType,apache::thrift::Cpp2RequestContext* context,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  virtual bool isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header);
 private:
  static std::unordered_set<std::string> onewayMethods;
  typedef void (GossipServiceAsyncProcessor::*binaryProcessFunction)(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<apache::thrift::BinaryProtocolReader> iprot, apache::thrift::Cpp2RequestContext* context, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  typedef std::unordered_map<std::string, binaryProcessFunction> binaryProcessMap;
  static GossipServiceAsyncProcessor::binaryProcessMap binaryProcessMap_;
  typedef void (GossipServiceAsyncProcessor::*compactProcessFunction)(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<apache::thrift::CompactProtocolReader> iprot, apache::thrift::Cpp2RequestContext* context, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  typedef std::unordered_map<std::string, compactProcessFunction> compactProcessMap;
  static GossipServiceAsyncProcessor::compactProcessMap compactProcessMap_;
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_ping(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_ping(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_ping(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_ping(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_ping(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_joinCluster(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_joinCluster(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_joinCluster(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx, std::set< ::cpp2::GossipState> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_joinCluster(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_joinCluster(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_sendUpdate(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_sendUpdate(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_sendUpdate(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx,  ::cpp2::GossipState const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_sendUpdate(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_sendUpdate(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_sendStatusUpdate(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_sendStatusUpdate(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_sendStatusUpdate(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx,  ::cpp2::GossipState const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_sendStatusUpdate(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_sendStatusUpdate(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
 public:
  GossipServiceAsyncProcessor(GossipServiceSvIf* iface) :
      iface_(iface) {}

  virtual ~GossipServiceAsyncProcessor() {}
};

class GossipServiceAsyncClient : public apache::thrift::TClientBase {
 public:
  virtual std::string getServiceName();
  typedef std::unique_ptr<apache::thrift::RequestChannel, apache::thrift::async::TDelayedDestruction::Destructor> channel_ptr;

  virtual ~GossipServiceAsyncClient() {}

  GossipServiceAsyncClient(std::shared_ptr<apache::thrift::RequestChannel> channel) :
      channel_(channel) {
    connectionContext_ = std::unique_ptr<TClientBase::ConnContext>(new TClientBase::ConnContext(channel_->getHeader(),nullptr));
  }

  apache::thrift::RequestChannel*  getChannel() {
    return this->channel_.get();
  }
  virtual void ping(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void callback_ping(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void ping(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void sync_ping();
  virtual void sync_ping(const apache::thrift::RpcOptions& rpcOptions);
  virtual void ping(std::function<void (::apache::thrift::ClientReceiveState&&)> callback);
  virtual void functor_ping(std::function<void (::apache::thrift::ClientReceiveState&&)> callback);
  virtual folly::wangle::Future<void> future_ping();
  virtual folly::wangle::Future<void> future_ping(const apache::thrift::RpcOptions& rpcOptions);
  static folly::exception_wrapper recv_wrapped_ping(::apache::thrift::ClientReceiveState& state);
  static void recv_ping(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_ping(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_ping(::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void pingT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_pingT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_pingT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state);
  virtual void joinCluster(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipNode& self);
  virtual void callback_joinCluster(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipNode& self);
  virtual void joinCluster(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipNode& self);
  virtual void sync_joinCluster(std::set< ::cpp2::GossipState>& _return, const  ::cpp2::GossipNode& self);
  virtual void sync_joinCluster(const apache::thrift::RpcOptions& rpcOptions, std::set< ::cpp2::GossipState>& _return, const  ::cpp2::GossipNode& self);
  virtual void joinCluster(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::cpp2::GossipNode& self);
  virtual void functor_joinCluster(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::cpp2::GossipNode& self);
  virtual folly::wangle::Future<std::set< ::cpp2::GossipState>> future_joinCluster(const  ::cpp2::GossipNode& self);
  virtual folly::wangle::Future<std::set< ::cpp2::GossipState>> future_joinCluster(const apache::thrift::RpcOptions& rpcOptions, const  ::cpp2::GossipNode& self);
  static folly::exception_wrapper recv_wrapped_joinCluster(std::set< ::cpp2::GossipState>& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_joinCluster(std::set< ::cpp2::GossipState>& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_joinCluster(std::set< ::cpp2::GossipState>& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_joinCluster(std::set< ::cpp2::GossipState>& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void joinClusterT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipNode& self);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_joinClusterT(Protocol_* prot, std::set< ::cpp2::GossipState>& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_joinClusterT(Protocol_* prot, std::set< ::cpp2::GossipState>& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void sendUpdate(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipState& state);
  virtual void callback_sendUpdate(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipState& state);
  virtual void sendUpdate(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipState& state);
  virtual void sync_sendUpdate( ::cpp2::GossipState& _return, const  ::cpp2::GossipState& state);
  virtual void sync_sendUpdate(const apache::thrift::RpcOptions& rpcOptions,  ::cpp2::GossipState& _return, const  ::cpp2::GossipState& state);
  virtual void sendUpdate(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::cpp2::GossipState& state);
  virtual void functor_sendUpdate(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::cpp2::GossipState& state);
  virtual folly::wangle::Future< ::cpp2::GossipState> future_sendUpdate(const  ::cpp2::GossipState& state);
  virtual folly::wangle::Future< ::cpp2::GossipState> future_sendUpdate(const apache::thrift::RpcOptions& rpcOptions, const  ::cpp2::GossipState& state);
  static folly::exception_wrapper recv_wrapped_sendUpdate( ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_sendUpdate( ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_sendUpdate( ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_sendUpdate( ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void sendUpdateT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipState& state);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_sendUpdateT(Protocol_* prot,  ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_sendUpdateT(Protocol_* prot,  ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void sendStatusUpdate(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipState& state, const  ::cpp2::GossipState& oldState, const  ::cpp2::GossipState& newState);
  virtual void callback_sendStatusUpdate(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipState& state, const  ::cpp2::GossipState& oldState, const  ::cpp2::GossipState& newState);
  virtual void sendStatusUpdate(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipState& state, const  ::cpp2::GossipState& oldState, const  ::cpp2::GossipState& newState);
  virtual void sync_sendStatusUpdate( ::cpp2::GossipState& _return, const  ::cpp2::GossipState& state, const  ::cpp2::GossipState& oldState, const  ::cpp2::GossipState& newState);
  virtual void sync_sendStatusUpdate(const apache::thrift::RpcOptions& rpcOptions,  ::cpp2::GossipState& _return, const  ::cpp2::GossipState& state, const  ::cpp2::GossipState& oldState, const  ::cpp2::GossipState& newState);
  virtual void sendStatusUpdate(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::cpp2::GossipState& state, const  ::cpp2::GossipState& oldState, const  ::cpp2::GossipState& newState);
  virtual void functor_sendStatusUpdate(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::cpp2::GossipState& state, const  ::cpp2::GossipState& oldState, const  ::cpp2::GossipState& newState);
  virtual folly::wangle::Future< ::cpp2::GossipState> future_sendStatusUpdate(const  ::cpp2::GossipState& state, const  ::cpp2::GossipState& oldState, const  ::cpp2::GossipState& newState);
  virtual folly::wangle::Future< ::cpp2::GossipState> future_sendStatusUpdate(const apache::thrift::RpcOptions& rpcOptions, const  ::cpp2::GossipState& state, const  ::cpp2::GossipState& oldState, const  ::cpp2::GossipState& newState);
  static folly::exception_wrapper recv_wrapped_sendStatusUpdate( ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_sendStatusUpdate( ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_sendStatusUpdate( ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_sendStatusUpdate( ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void sendStatusUpdateT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipState& state, const  ::cpp2::GossipState& oldState, const  ::cpp2::GossipState& newState);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_sendStatusUpdateT(Protocol_* prot,  ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_sendStatusUpdateT(Protocol_* prot,  ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state);
 protected:
  std::unique_ptr<apache::thrift::server::TConnectionContext>connectionContext_;
  std::shared_ptr<apache::thrift::RequestChannel> channel_;
};

class GossipService_ping_args : private boost::totally_ordered<GossipService_ping_args> {
 public:

  GossipService_ping_args() {}
  // FragileConstructor for use in initialization lists only

  GossipService_ping_args(apache::thrift::FragileConstructor) {}

  GossipService_ping_args(GossipService_ping_args&&) = default;

  GossipService_ping_args(const GossipService_ping_args&) = default;

  GossipService_ping_args& operator=(GossipService_ping_args&&) = default;

  GossipService_ping_args& operator=(const GossipService_ping_args&) = default;

  virtual ~GossipService_ping_args() throw() {}

  bool operator==(const GossipService_ping_args& /* rhs */) const;

  bool operator < (const GossipService_ping_args& rhs) const {
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class GossipService_ping_pargs : private boost::totally_ordered<GossipService_ping_pargs> {
 public:
  virtual ~GossipService_ping_pargs() throw() {}


  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class GossipService_ping_presult : private boost::totally_ordered<GossipService_ping_presult> {
 public:
  virtual ~GossipService_ping_presult() throw() {}


  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class GossipService_ping_result : private boost::totally_ordered<GossipService_ping_result> {
 public:

  GossipService_ping_result() {}
  // FragileConstructor for use in initialization lists only

  GossipService_ping_result(apache::thrift::FragileConstructor) {}

  GossipService_ping_result(GossipService_ping_result&&) = default;

  GossipService_ping_result(const GossipService_ping_result&) = default;

  GossipService_ping_result& operator=(GossipService_ping_result&&) = default;

  GossipService_ping_result& operator=(const GossipService_ping_result&) = default;

  virtual ~GossipService_ping_result() throw() {}

  bool operator==(const GossipService_ping_result& /* rhs */) const;

  bool operator < (const GossipService_ping_result& rhs) const {
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class GossipService_joinCluster_args : private boost::totally_ordered<GossipService_joinCluster_args> {
 public:

  GossipService_joinCluster_args() {}
  // FragileConstructor for use in initialization lists only

  GossipService_joinCluster_args(apache::thrift::FragileConstructor,  ::cpp2::GossipNode self__arg) :
      self(std::move(self__arg)) {}

  GossipService_joinCluster_args(GossipService_joinCluster_args&&) = default;

  GossipService_joinCluster_args(const GossipService_joinCluster_args&) = default;

  GossipService_joinCluster_args& operator=(GossipService_joinCluster_args&&) = default;

  GossipService_joinCluster_args& operator=(const GossipService_joinCluster_args&) = default;
  void __clear();

  virtual ~GossipService_joinCluster_args() throw() {}

   ::cpp2::GossipNode self;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      self = false;
    }

    bool self;
  } __isset;
  bool operator==(const GossipService_joinCluster_args& rhs) const;

  bool operator < (const GossipService_joinCluster_args& rhs) const {
    if (!(self == rhs.self)) {
      return self < rhs.self;
    }
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class GossipService_joinCluster_pargs : private boost::totally_ordered<GossipService_joinCluster_pargs> {
 public:
  virtual ~GossipService_joinCluster_pargs() throw() {}

   ::cpp2::GossipNode* self;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      self = false;
    }

    bool self;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class GossipService_joinCluster_presult : private boost::totally_ordered<GossipService_joinCluster_presult> {
 public:
  virtual ~GossipService_joinCluster_presult() throw() {}

  std::set< ::cpp2::GossipState>* success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class GossipService_joinCluster_result : private boost::totally_ordered<GossipService_joinCluster_result> {
 public:

  GossipService_joinCluster_result() {}
  // FragileConstructor for use in initialization lists only

  GossipService_joinCluster_result(apache::thrift::FragileConstructor, std::set< ::cpp2::GossipState> success__arg) :
      success(std::move(success__arg)) {}

  GossipService_joinCluster_result(GossipService_joinCluster_result&&) = default;

  GossipService_joinCluster_result(const GossipService_joinCluster_result&) = default;

  GossipService_joinCluster_result& operator=(GossipService_joinCluster_result&&) = default;

  GossipService_joinCluster_result& operator=(const GossipService_joinCluster_result&) = default;
  void __clear();

  virtual ~GossipService_joinCluster_result() throw() {}

  std::set< ::cpp2::GossipState> success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;
  bool operator==(const GossipService_joinCluster_result& rhs) const;

  bool operator < (const GossipService_joinCluster_result& rhs) const {
    if (!(success == rhs.success)) {
      return success < rhs.success;
    }
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class GossipService_sendUpdate_args : private boost::totally_ordered<GossipService_sendUpdate_args> {
 public:

  GossipService_sendUpdate_args() {}
  // FragileConstructor for use in initialization lists only

  GossipService_sendUpdate_args(apache::thrift::FragileConstructor,  ::cpp2::GossipState state__arg) :
      state(std::move(state__arg)) {}

  GossipService_sendUpdate_args(GossipService_sendUpdate_args&&) = default;

  GossipService_sendUpdate_args(const GossipService_sendUpdate_args&) = default;

  GossipService_sendUpdate_args& operator=(GossipService_sendUpdate_args&&) = default;

  GossipService_sendUpdate_args& operator=(const GossipService_sendUpdate_args&) = default;
  void __clear();

  virtual ~GossipService_sendUpdate_args() throw() {}

   ::cpp2::GossipState state;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      state = false;
    }

    bool state;
  } __isset;
  bool operator==(const GossipService_sendUpdate_args& rhs) const;

  bool operator < (const GossipService_sendUpdate_args& rhs) const {
    if (!(state == rhs.state)) {
      return state < rhs.state;
    }
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class GossipService_sendUpdate_pargs : private boost::totally_ordered<GossipService_sendUpdate_pargs> {
 public:
  virtual ~GossipService_sendUpdate_pargs() throw() {}

   ::cpp2::GossipState* state;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      state = false;
    }

    bool state;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class GossipService_sendUpdate_presult : private boost::totally_ordered<GossipService_sendUpdate_presult> {
 public:
  virtual ~GossipService_sendUpdate_presult() throw() {}

   ::cpp2::GossipState* success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class GossipService_sendUpdate_result : private boost::totally_ordered<GossipService_sendUpdate_result> {
 public:

  GossipService_sendUpdate_result() {}
  // FragileConstructor for use in initialization lists only

  GossipService_sendUpdate_result(apache::thrift::FragileConstructor,  ::cpp2::GossipState success__arg) :
      success(std::move(success__arg)) {}

  GossipService_sendUpdate_result(GossipService_sendUpdate_result&&) = default;

  GossipService_sendUpdate_result(const GossipService_sendUpdate_result&) = default;

  GossipService_sendUpdate_result& operator=(GossipService_sendUpdate_result&&) = default;

  GossipService_sendUpdate_result& operator=(const GossipService_sendUpdate_result&) = default;
  void __clear();

  virtual ~GossipService_sendUpdate_result() throw() {}

   ::cpp2::GossipState success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;
  bool operator==(const GossipService_sendUpdate_result& rhs) const;

  bool operator < (const GossipService_sendUpdate_result& rhs) const {
    if (!(success == rhs.success)) {
      return success < rhs.success;
    }
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class GossipService_sendStatusUpdate_args : private boost::totally_ordered<GossipService_sendStatusUpdate_args> {
 public:

  GossipService_sendStatusUpdate_args() {}
  // FragileConstructor for use in initialization lists only

  GossipService_sendStatusUpdate_args(apache::thrift::FragileConstructor,  ::cpp2::GossipState state__arg,  ::cpp2::GossipState oldState__arg,  ::cpp2::GossipState newState__arg) :
      state(std::move(state__arg)),
      oldState(std::move(oldState__arg)),
      newState(std::move(newState__arg)) {}

  GossipService_sendStatusUpdate_args(GossipService_sendStatusUpdate_args&&) = default;

  GossipService_sendStatusUpdate_args(const GossipService_sendStatusUpdate_args&) = default;

  GossipService_sendStatusUpdate_args& operator=(GossipService_sendStatusUpdate_args&&) = default;

  GossipService_sendStatusUpdate_args& operator=(const GossipService_sendStatusUpdate_args&) = default;
  void __clear();

  virtual ~GossipService_sendStatusUpdate_args() throw() {}

   ::cpp2::GossipState state;
   ::cpp2::GossipState oldState;
   ::cpp2::GossipState newState;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      state = false;
      oldState = false;
      newState = false;
    }

    bool state;
    bool oldState;
    bool newState;
  } __isset;
  bool operator==(const GossipService_sendStatusUpdate_args& rhs) const;

  bool operator < (const GossipService_sendStatusUpdate_args& rhs) const {
    if (!(state == rhs.state)) {
      return state < rhs.state;
    }
    if (!(oldState == rhs.oldState)) {
      return oldState < rhs.oldState;
    }
    if (!(newState == rhs.newState)) {
      return newState < rhs.newState;
    }
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class GossipService_sendStatusUpdate_pargs : private boost::totally_ordered<GossipService_sendStatusUpdate_pargs> {
 public:
  virtual ~GossipService_sendStatusUpdate_pargs() throw() {}

   ::cpp2::GossipState* state;
   ::cpp2::GossipState* oldState;
   ::cpp2::GossipState* newState;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      state = false;
      oldState = false;
      newState = false;
    }

    bool state;
    bool oldState;
    bool newState;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class GossipService_sendStatusUpdate_presult : private boost::totally_ordered<GossipService_sendStatusUpdate_presult> {
 public:
  virtual ~GossipService_sendStatusUpdate_presult() throw() {}

   ::cpp2::GossipState* success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class GossipService_sendStatusUpdate_result : private boost::totally_ordered<GossipService_sendStatusUpdate_result> {
 public:

  GossipService_sendStatusUpdate_result() {}
  // FragileConstructor for use in initialization lists only

  GossipService_sendStatusUpdate_result(apache::thrift::FragileConstructor,  ::cpp2::GossipState success__arg) :
      success(std::move(success__arg)) {}

  GossipService_sendStatusUpdate_result(GossipService_sendStatusUpdate_result&&) = default;

  GossipService_sendStatusUpdate_result(const GossipService_sendStatusUpdate_result&) = default;

  GossipService_sendStatusUpdate_result& operator=(GossipService_sendStatusUpdate_result&&) = default;

  GossipService_sendStatusUpdate_result& operator=(const GossipService_sendStatusUpdate_result&) = default;
  void __clear();

  virtual ~GossipService_sendStatusUpdate_result() throw() {}

   ::cpp2::GossipState success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;
  bool operator==(const GossipService_sendStatusUpdate_result& rhs) const;

  bool operator < (const GossipService_sendStatusUpdate_result& rhs) const {
    if (!(success == rhs.success)) {
      return success < rhs.success;
    }
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

} // cpp2
namespace apache { namespace thrift {

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_ping_args>::write(Protocol* proto, const  ::cpp2::GossipService_ping_args* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_ping_args>::read(Protocol* proto,   ::cpp2::GossipService_ping_args* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_ping_args>::serializedSize(Protocol* proto, const  ::cpp2::GossipService_ping_args* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_ping_args>::serializedSizeZC(Protocol* proto, const  ::cpp2::GossipService_ping_args* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_ping_pargs>::write(Protocol* proto, const  ::cpp2::GossipService_ping_pargs* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_ping_pargs>::read(Protocol* proto,   ::cpp2::GossipService_ping_pargs* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_ping_pargs>::serializedSize(Protocol* proto, const  ::cpp2::GossipService_ping_pargs* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_ping_pargs>::serializedSizeZC(Protocol* proto, const  ::cpp2::GossipService_ping_pargs* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_ping_presult>::write(Protocol* proto, const  ::cpp2::GossipService_ping_presult* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_ping_presult>::read(Protocol* proto,   ::cpp2::GossipService_ping_presult* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_ping_presult>::serializedSize(Protocol* proto, const  ::cpp2::GossipService_ping_presult* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_ping_presult>::serializedSizeZC(Protocol* proto, const  ::cpp2::GossipService_ping_presult* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_ping_result>::write(Protocol* proto, const  ::cpp2::GossipService_ping_result* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_ping_result>::read(Protocol* proto,   ::cpp2::GossipService_ping_result* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_ping_result>::serializedSize(Protocol* proto, const  ::cpp2::GossipService_ping_result* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_ping_result>::serializedSizeZC(Protocol* proto, const  ::cpp2::GossipService_ping_result* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_joinCluster_args>::write(Protocol* proto, const  ::cpp2::GossipService_joinCluster_args* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_joinCluster_args>::read(Protocol* proto,   ::cpp2::GossipService_joinCluster_args* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_joinCluster_args>::serializedSize(Protocol* proto, const  ::cpp2::GossipService_joinCluster_args* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_joinCluster_args>::serializedSizeZC(Protocol* proto, const  ::cpp2::GossipService_joinCluster_args* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_joinCluster_pargs>::write(Protocol* proto, const  ::cpp2::GossipService_joinCluster_pargs* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_joinCluster_pargs>::read(Protocol* proto,   ::cpp2::GossipService_joinCluster_pargs* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_joinCluster_pargs>::serializedSize(Protocol* proto, const  ::cpp2::GossipService_joinCluster_pargs* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_joinCluster_pargs>::serializedSizeZC(Protocol* proto, const  ::cpp2::GossipService_joinCluster_pargs* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_joinCluster_presult>::write(Protocol* proto, const  ::cpp2::GossipService_joinCluster_presult* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_joinCluster_presult>::read(Protocol* proto,   ::cpp2::GossipService_joinCluster_presult* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_joinCluster_presult>::serializedSize(Protocol* proto, const  ::cpp2::GossipService_joinCluster_presult* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_joinCluster_presult>::serializedSizeZC(Protocol* proto, const  ::cpp2::GossipService_joinCluster_presult* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_joinCluster_result>::write(Protocol* proto, const  ::cpp2::GossipService_joinCluster_result* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_joinCluster_result>::read(Protocol* proto,   ::cpp2::GossipService_joinCluster_result* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_joinCluster_result>::serializedSize(Protocol* proto, const  ::cpp2::GossipService_joinCluster_result* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_joinCluster_result>::serializedSizeZC(Protocol* proto, const  ::cpp2::GossipService_joinCluster_result* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendUpdate_args>::write(Protocol* proto, const  ::cpp2::GossipService_sendUpdate_args* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendUpdate_args>::read(Protocol* proto,   ::cpp2::GossipService_sendUpdate_args* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendUpdate_args>::serializedSize(Protocol* proto, const  ::cpp2::GossipService_sendUpdate_args* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendUpdate_args>::serializedSizeZC(Protocol* proto, const  ::cpp2::GossipService_sendUpdate_args* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendUpdate_pargs>::write(Protocol* proto, const  ::cpp2::GossipService_sendUpdate_pargs* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendUpdate_pargs>::read(Protocol* proto,   ::cpp2::GossipService_sendUpdate_pargs* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendUpdate_pargs>::serializedSize(Protocol* proto, const  ::cpp2::GossipService_sendUpdate_pargs* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendUpdate_pargs>::serializedSizeZC(Protocol* proto, const  ::cpp2::GossipService_sendUpdate_pargs* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendUpdate_presult>::write(Protocol* proto, const  ::cpp2::GossipService_sendUpdate_presult* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendUpdate_presult>::read(Protocol* proto,   ::cpp2::GossipService_sendUpdate_presult* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendUpdate_presult>::serializedSize(Protocol* proto, const  ::cpp2::GossipService_sendUpdate_presult* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendUpdate_presult>::serializedSizeZC(Protocol* proto, const  ::cpp2::GossipService_sendUpdate_presult* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendUpdate_result>::write(Protocol* proto, const  ::cpp2::GossipService_sendUpdate_result* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendUpdate_result>::read(Protocol* proto,   ::cpp2::GossipService_sendUpdate_result* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendUpdate_result>::serializedSize(Protocol* proto, const  ::cpp2::GossipService_sendUpdate_result* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendUpdate_result>::serializedSizeZC(Protocol* proto, const  ::cpp2::GossipService_sendUpdate_result* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendStatusUpdate_args>::write(Protocol* proto, const  ::cpp2::GossipService_sendStatusUpdate_args* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendStatusUpdate_args>::read(Protocol* proto,   ::cpp2::GossipService_sendStatusUpdate_args* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendStatusUpdate_args>::serializedSize(Protocol* proto, const  ::cpp2::GossipService_sendStatusUpdate_args* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendStatusUpdate_args>::serializedSizeZC(Protocol* proto, const  ::cpp2::GossipService_sendStatusUpdate_args* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendStatusUpdate_pargs>::write(Protocol* proto, const  ::cpp2::GossipService_sendStatusUpdate_pargs* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendStatusUpdate_pargs>::read(Protocol* proto,   ::cpp2::GossipService_sendStatusUpdate_pargs* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendStatusUpdate_pargs>::serializedSize(Protocol* proto, const  ::cpp2::GossipService_sendStatusUpdate_pargs* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendStatusUpdate_pargs>::serializedSizeZC(Protocol* proto, const  ::cpp2::GossipService_sendStatusUpdate_pargs* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendStatusUpdate_presult>::write(Protocol* proto, const  ::cpp2::GossipService_sendStatusUpdate_presult* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendStatusUpdate_presult>::read(Protocol* proto,   ::cpp2::GossipService_sendStatusUpdate_presult* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendStatusUpdate_presult>::serializedSize(Protocol* proto, const  ::cpp2::GossipService_sendStatusUpdate_presult* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendStatusUpdate_presult>::serializedSizeZC(Protocol* proto, const  ::cpp2::GossipService_sendStatusUpdate_presult* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendStatusUpdate_result>::write(Protocol* proto, const  ::cpp2::GossipService_sendStatusUpdate_result* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendStatusUpdate_result>::read(Protocol* proto,   ::cpp2::GossipService_sendStatusUpdate_result* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendStatusUpdate_result>::serializedSize(Protocol* proto, const  ::cpp2::GossipService_sendStatusUpdate_result* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::GossipService_sendStatusUpdate_result>::serializedSizeZC(Protocol* proto, const  ::cpp2::GossipService_sendStatusUpdate_result* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift