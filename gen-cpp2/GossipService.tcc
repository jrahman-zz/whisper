/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "GossipService.h"

#include <thrift/lib/cpp/TApplicationException.h>

namespace cpp2 {

template <typename ProtocolIn_, typename ProtocolOut_>
void GossipServiceAsyncProcessor::_processInThread_ping(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  auto pri = iface_->getprio_ping(ctx);
  processInThread<ProtocolIn_, ProtocolOut_>(std::move(req), std::move(buf),std::move(iprot), ctx, eb, tm, pri, false, &GossipServiceAsyncProcessor::process_ping<ProtocolIn_, ProtocolOut_>, this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void GossipServiceAsyncProcessor::process_ping(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  GossipService_ping_pargs args;
  std::unique_ptr<apache::thrift::ContextStack> c(this->getContextStack(this->getServiceName(), "GossipService.ping", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), c.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function ping";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("ping", &prot, iprot->getSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getTransforms(), ctx->getMinCompressBytes()));
      auto queue_mw = folly::makeMoveWrapper(std::move(queue));
      auto req_mw = folly::makeMoveWrapper(std::move(req));
      eb->runInEventBaseThread([=]() mutable {
        (*req_mw)->sendReply(queue_mw->move());
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function ping";
    }
  }
  std::unique_ptr<apache::thrift::HandlerCallback<void>> callback(new apache::thrift::HandlerCallback<void>(std::move(req), std::move(c), return_ping<ProtocolIn_,ProtocolOut_>, throw_ping<ProtocolIn_, ProtocolOut_>, throw_wrapped_ping<ProtocolIn_, ProtocolOut_>, iprot->getSeqId(), eb, tm, ctx));
  if (!callback->isRequestActive()) {
    callback.release()->deleteInThread();
    return;
  }
  ctx->setStartedProcessing();
  iface_->async_tm_ping(std::move(callback));
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue GossipServiceAsyncProcessor::return_ping(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx) {
  ProtocolOut_ prot;
  GossipService_ping_presult result;
  return serializeResponse("ping", &prot, protoSeqId, ctx.get(), result);
}

template <class ProtocolIn_, class ProtocolOut_>
void GossipServiceAsyncProcessor::throw_ping(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx) {
  ProtocolOut_ prot;
  try {
    std::rethrow_exception(ep);
  }
  catch (const std::exception& e) {
    if (req) {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in function ping";
      apache::thrift::TApplicationException x(folly::exceptionStr(e).toStdString());
      ctx->userException(folly::demangle(typeid(e)).toStdString());
      folly::IOBufQueue queue = serializeException("ping", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in oneway function ping";
    }
  }
  catch (...) {
    if (req) {
      LOG(ERROR) << "<unknown exception>" << " in function ping";
      apache::thrift::TApplicationException x("<unknown exception>");
      folly::IOBufQueue queue = serializeException("ping", &prot, protoSeqId, nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << "<unknown exception>" << " in oneway function ping";
    }
  }
}

template <class ProtocolIn_, class ProtocolOut_>
void GossipServiceAsyncProcessor::throw_wrapped_ping(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
   {
    if (req) {
      LOG(ERROR) << ew.what().toStdString() << " in function ping";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userException(ew.class_name().toStdString());
      folly::IOBufQueue queue = serializeException("ping", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew.what().toStdString() << " in oneway function ping";
    }
  }
}

template <typename ProtocolIn_, typename ProtocolOut_>
void GossipServiceAsyncProcessor::_processInThread_joinCluster(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  auto pri = iface_->getprio_joinCluster(ctx);
  processInThread<ProtocolIn_, ProtocolOut_>(std::move(req), std::move(buf),std::move(iprot), ctx, eb, tm, pri, false, &GossipServiceAsyncProcessor::process_joinCluster<ProtocolIn_, ProtocolOut_>, this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void GossipServiceAsyncProcessor::process_joinCluster(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  GossipService_joinCluster_pargs args;
  std::unique_ptr< ::cpp2::GossipNode> uarg_self(new  ::cpp2::GossipNode());
  args.self = uarg_self.get();
  std::unique_ptr<apache::thrift::ContextStack> c(this->getContextStack(this->getServiceName(), "GossipService.joinCluster", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), c.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function joinCluster";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("joinCluster", &prot, iprot->getSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getTransforms(), ctx->getMinCompressBytes()));
      auto queue_mw = folly::makeMoveWrapper(std::move(queue));
      auto req_mw = folly::makeMoveWrapper(std::move(req));
      eb->runInEventBaseThread([=]() mutable {
        (*req_mw)->sendReply(queue_mw->move());
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function joinCluster";
    }
  }
  std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::set< ::cpp2::GossipState>>>> callback(new apache::thrift::HandlerCallback<std::unique_ptr<std::set< ::cpp2::GossipState>>>(std::move(req), std::move(c), return_joinCluster<ProtocolIn_,ProtocolOut_>, throw_joinCluster<ProtocolIn_, ProtocolOut_>, throw_wrapped_joinCluster<ProtocolIn_, ProtocolOut_>, iprot->getSeqId(), eb, tm, ctx));
  if (!callback->isRequestActive()) {
    callback.release()->deleteInThread();
    return;
  }
  ctx->setStartedProcessing();
  iface_->async_tm_joinCluster(std::move(callback), std::move(uarg_self));
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue GossipServiceAsyncProcessor::return_joinCluster(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx, std::set< ::cpp2::GossipState> const& _return) {
  ProtocolOut_ prot;
  GossipService_joinCluster_presult result;
  result.success = const_cast<std::set< ::cpp2::GossipState>*>(&_return);
  result.__isset.success = true;
  return serializeResponse("joinCluster", &prot, protoSeqId, ctx.get(), result);
}

template <class ProtocolIn_, class ProtocolOut_>
void GossipServiceAsyncProcessor::throw_joinCluster(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx) {
  ProtocolOut_ prot;
  try {
    std::rethrow_exception(ep);
  }
  catch (const std::exception& e) {
    if (req) {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in function joinCluster";
      apache::thrift::TApplicationException x(folly::exceptionStr(e).toStdString());
      ctx->userException(folly::demangle(typeid(e)).toStdString());
      folly::IOBufQueue queue = serializeException("joinCluster", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in oneway function joinCluster";
    }
  }
  catch (...) {
    if (req) {
      LOG(ERROR) << "<unknown exception>" << " in function joinCluster";
      apache::thrift::TApplicationException x("<unknown exception>");
      folly::IOBufQueue queue = serializeException("joinCluster", &prot, protoSeqId, nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << "<unknown exception>" << " in oneway function joinCluster";
    }
  }
}

template <class ProtocolIn_, class ProtocolOut_>
void GossipServiceAsyncProcessor::throw_wrapped_joinCluster(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
   {
    if (req) {
      LOG(ERROR) << ew.what().toStdString() << " in function joinCluster";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userException(ew.class_name().toStdString());
      folly::IOBufQueue queue = serializeException("joinCluster", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew.what().toStdString() << " in oneway function joinCluster";
    }
  }
}

template <typename ProtocolIn_, typename ProtocolOut_>
void GossipServiceAsyncProcessor::_processInThread_sendUpdate(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  auto pri = iface_->getprio_sendUpdate(ctx);
  processInThread<ProtocolIn_, ProtocolOut_>(std::move(req), std::move(buf),std::move(iprot), ctx, eb, tm, pri, false, &GossipServiceAsyncProcessor::process_sendUpdate<ProtocolIn_, ProtocolOut_>, this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void GossipServiceAsyncProcessor::process_sendUpdate(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  GossipService_sendUpdate_pargs args;
  std::unique_ptr< ::cpp2::GossipState> uarg_state(new  ::cpp2::GossipState());
  args.state = uarg_state.get();
  std::unique_ptr<apache::thrift::ContextStack> c(this->getContextStack(this->getServiceName(), "GossipService.sendUpdate", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), c.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function sendUpdate";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("sendUpdate", &prot, iprot->getSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getTransforms(), ctx->getMinCompressBytes()));
      auto queue_mw = folly::makeMoveWrapper(std::move(queue));
      auto req_mw = folly::makeMoveWrapper(std::move(req));
      eb->runInEventBaseThread([=]() mutable {
        (*req_mw)->sendReply(queue_mw->move());
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function sendUpdate";
    }
  }
  std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::cpp2::GossipState>>> callback(new apache::thrift::HandlerCallback<std::unique_ptr< ::cpp2::GossipState>>(std::move(req), std::move(c), return_sendUpdate<ProtocolIn_,ProtocolOut_>, throw_sendUpdate<ProtocolIn_, ProtocolOut_>, throw_wrapped_sendUpdate<ProtocolIn_, ProtocolOut_>, iprot->getSeqId(), eb, tm, ctx));
  if (!callback->isRequestActive()) {
    callback.release()->deleteInThread();
    return;
  }
  ctx->setStartedProcessing();
  iface_->async_tm_sendUpdate(std::move(callback), std::move(uarg_state));
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue GossipServiceAsyncProcessor::return_sendUpdate(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx,  ::cpp2::GossipState const& _return) {
  ProtocolOut_ prot;
  GossipService_sendUpdate_presult result;
  result.success = const_cast< ::cpp2::GossipState*>(&_return);
  result.__isset.success = true;
  return serializeResponse("sendUpdate", &prot, protoSeqId, ctx.get(), result);
}

template <class ProtocolIn_, class ProtocolOut_>
void GossipServiceAsyncProcessor::throw_sendUpdate(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx) {
  ProtocolOut_ prot;
  try {
    std::rethrow_exception(ep);
  }
  catch (const std::exception& e) {
    if (req) {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in function sendUpdate";
      apache::thrift::TApplicationException x(folly::exceptionStr(e).toStdString());
      ctx->userException(folly::demangle(typeid(e)).toStdString());
      folly::IOBufQueue queue = serializeException("sendUpdate", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in oneway function sendUpdate";
    }
  }
  catch (...) {
    if (req) {
      LOG(ERROR) << "<unknown exception>" << " in function sendUpdate";
      apache::thrift::TApplicationException x("<unknown exception>");
      folly::IOBufQueue queue = serializeException("sendUpdate", &prot, protoSeqId, nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << "<unknown exception>" << " in oneway function sendUpdate";
    }
  }
}

template <class ProtocolIn_, class ProtocolOut_>
void GossipServiceAsyncProcessor::throw_wrapped_sendUpdate(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
   {
    if (req) {
      LOG(ERROR) << ew.what().toStdString() << " in function sendUpdate";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userException(ew.class_name().toStdString());
      folly::IOBufQueue queue = serializeException("sendUpdate", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew.what().toStdString() << " in oneway function sendUpdate";
    }
  }
}

template <typename ProtocolIn_, typename ProtocolOut_>
void GossipServiceAsyncProcessor::_processInThread_sendStatusUpdate(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  auto pri = iface_->getprio_sendStatusUpdate(ctx);
  processInThread<ProtocolIn_, ProtocolOut_>(std::move(req), std::move(buf),std::move(iprot), ctx, eb, tm, pri, false, &GossipServiceAsyncProcessor::process_sendStatusUpdate<ProtocolIn_, ProtocolOut_>, this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void GossipServiceAsyncProcessor::process_sendStatusUpdate(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  GossipService_sendStatusUpdate_pargs args;
  std::unique_ptr< ::cpp2::GossipState> uarg_state(new  ::cpp2::GossipState());
  args.state = uarg_state.get();
  std::unique_ptr< ::cpp2::GossipState> uarg_oldState(new  ::cpp2::GossipState());
  args.oldState = uarg_oldState.get();
  std::unique_ptr< ::cpp2::GossipState> uarg_newState(new  ::cpp2::GossipState());
  args.newState = uarg_newState.get();
  std::unique_ptr<apache::thrift::ContextStack> c(this->getContextStack(this->getServiceName(), "GossipService.sendStatusUpdate", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), c.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function sendStatusUpdate";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("sendStatusUpdate", &prot, iprot->getSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getTransforms(), ctx->getMinCompressBytes()));
      auto queue_mw = folly::makeMoveWrapper(std::move(queue));
      auto req_mw = folly::makeMoveWrapper(std::move(req));
      eb->runInEventBaseThread([=]() mutable {
        (*req_mw)->sendReply(queue_mw->move());
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function sendStatusUpdate";
    }
  }
  std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::cpp2::GossipState>>> callback(new apache::thrift::HandlerCallback<std::unique_ptr< ::cpp2::GossipState>>(std::move(req), std::move(c), return_sendStatusUpdate<ProtocolIn_,ProtocolOut_>, throw_sendStatusUpdate<ProtocolIn_, ProtocolOut_>, throw_wrapped_sendStatusUpdate<ProtocolIn_, ProtocolOut_>, iprot->getSeqId(), eb, tm, ctx));
  if (!callback->isRequestActive()) {
    callback.release()->deleteInThread();
    return;
  }
  ctx->setStartedProcessing();
  iface_->async_tm_sendStatusUpdate(std::move(callback), std::move(uarg_state), std::move(uarg_oldState), std::move(uarg_newState));
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue GossipServiceAsyncProcessor::return_sendStatusUpdate(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx,  ::cpp2::GossipState const& _return) {
  ProtocolOut_ prot;
  GossipService_sendStatusUpdate_presult result;
  result.success = const_cast< ::cpp2::GossipState*>(&_return);
  result.__isset.success = true;
  return serializeResponse("sendStatusUpdate", &prot, protoSeqId, ctx.get(), result);
}

template <class ProtocolIn_, class ProtocolOut_>
void GossipServiceAsyncProcessor::throw_sendStatusUpdate(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx) {
  ProtocolOut_ prot;
  try {
    std::rethrow_exception(ep);
  }
  catch (const std::exception& e) {
    if (req) {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in function sendStatusUpdate";
      apache::thrift::TApplicationException x(folly::exceptionStr(e).toStdString());
      ctx->userException(folly::demangle(typeid(e)).toStdString());
      folly::IOBufQueue queue = serializeException("sendStatusUpdate", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in oneway function sendStatusUpdate";
    }
  }
  catch (...) {
    if (req) {
      LOG(ERROR) << "<unknown exception>" << " in function sendStatusUpdate";
      apache::thrift::TApplicationException x("<unknown exception>");
      folly::IOBufQueue queue = serializeException("sendStatusUpdate", &prot, protoSeqId, nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << "<unknown exception>" << " in oneway function sendStatusUpdate";
    }
  }
}

template <class ProtocolIn_, class ProtocolOut_>
void GossipServiceAsyncProcessor::throw_wrapped_sendStatusUpdate(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
   {
    if (req) {
      LOG(ERROR) << ew.what().toStdString() << " in function sendStatusUpdate";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userException(ew.class_name().toStdString());
      folly::IOBufQueue queue = serializeException("sendStatusUpdate", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew.what().toStdString() << " in oneway function sendStatusUpdate";
    }
  }
}

template <typename Protocol_>
void GossipServiceAsyncClient::pingT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback) {
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "GossipService.ping", connectionContext_.get());
  GossipService_ping_pargs args;
  size_t bufSize = args.serializedSizeZC(prot);
  bufSize += prot->serializedMessageSize("ping");
  folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
  prot->setOutput(&queue, bufSize);
  auto guard = folly::makeGuard([&]{prot->setOutput(nullptr);});
  try {
    ctx->preWrite();
    prot->writeMessageBegin("ping", apache::thrift::T_CALL, 0);
    args.write(prot);
    prot->writeMessageEnd();
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = queue.front();
    ctx->onWriteData(smsg);
    ctx->postWrite(queue.chainLength());
  } catch(apache::thrift::TException &ex) {
    ctx->handlerError();
    throw;
  }
  auto eb = this->channel_->getEventBase();
  if(!eb || eb->isInEventBaseThread()) {
    this->channel_->sendRequest(rpcOptions, std::move(callback), std::move(ctx), queue.move());
  }
  else {
    auto mvCb = folly::makeMoveWrapper(std::move(callback));
    auto mvCtx = folly::makeMoveWrapper(std::move(ctx));
    auto mvBuf = folly::makeMoveWrapper(queue.move());
    eb->runInEventBaseThread([this, rpcOptions, mvCb, mvCtx, mvBuf] () mutable {
      this->channel_->sendRequest(rpcOptions, std::move(*mvCb), std::move(*mvCtx), std::move(*mvBuf));
    }
    );
  }
}

template <typename Protocol_>
folly::exception_wrapper GossipServiceAsyncClient::recv_wrapped_pingT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return state.exceptionWrapper();
  }
  prot->setInput(state.buf());
  auto guard = folly::makeGuard([&] {prot->setInput(nullptr);});
  apache::thrift::ContextStack* ctx = state.ctx();
  std::string fname;
  int32_t protoSeqId = 0;
  apache::thrift::MessageType mtype;
  ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    prot->readMessageBegin(fname, mtype, protoSeqId);
    if (mtype == apache::thrift::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(prot);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::T_REPLY) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("ping") != 0) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = state.buf();
    ctx->onReadData(smsg);
    GossipService_ping_presult result;
    result.read(prot);
    prot->readMessageEnd();
    ctx->postRead(state.buf()->length());
  }
  );
  if (interior_ew || caught_ew) {
    ctx->handlerError();
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

template <typename Protocol_>
void GossipServiceAsyncClient::recv_pingT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_pingT(prot, state);
  if (ew) {
    ew.throwException();
  }
}

template <typename Protocol_>
void GossipServiceAsyncClient::joinClusterT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipNode& self) {
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "GossipService.joinCluster", connectionContext_.get());
  GossipService_joinCluster_pargs args;
  args.self = const_cast< ::cpp2::GossipNode*>(&self);
  size_t bufSize = args.serializedSizeZC(prot);
  bufSize += prot->serializedMessageSize("joinCluster");
  folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
  prot->setOutput(&queue, bufSize);
  auto guard = folly::makeGuard([&]{prot->setOutput(nullptr);});
  try {
    ctx->preWrite();
    prot->writeMessageBegin("joinCluster", apache::thrift::T_CALL, 0);
    args.write(prot);
    prot->writeMessageEnd();
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = queue.front();
    ctx->onWriteData(smsg);
    ctx->postWrite(queue.chainLength());
  } catch(apache::thrift::TException &ex) {
    ctx->handlerError();
    throw;
  }
  auto eb = this->channel_->getEventBase();
  if(!eb || eb->isInEventBaseThread()) {
    this->channel_->sendRequest(rpcOptions, std::move(callback), std::move(ctx), queue.move());
  }
  else {
    auto mvCb = folly::makeMoveWrapper(std::move(callback));
    auto mvCtx = folly::makeMoveWrapper(std::move(ctx));
    auto mvBuf = folly::makeMoveWrapper(queue.move());
    eb->runInEventBaseThread([this, rpcOptions, mvCb, mvCtx, mvBuf] () mutable {
      this->channel_->sendRequest(rpcOptions, std::move(*mvCb), std::move(*mvCtx), std::move(*mvBuf));
    }
    );
  }
}

template <typename Protocol_>
folly::exception_wrapper GossipServiceAsyncClient::recv_wrapped_joinClusterT(Protocol_* prot, std::set< ::cpp2::GossipState>& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return state.exceptionWrapper();
  }
  prot->setInput(state.buf());
  auto guard = folly::makeGuard([&] {prot->setInput(nullptr);});
  apache::thrift::ContextStack* ctx = state.ctx();
  std::string fname;
  int32_t protoSeqId = 0;
  apache::thrift::MessageType mtype;
  ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    prot->readMessageBegin(fname, mtype, protoSeqId);
    if (mtype == apache::thrift::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(prot);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::T_REPLY) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("joinCluster") != 0) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = state.buf();
    ctx->onReadData(smsg);
    GossipService_joinCluster_presult result;
    result.success = &_return;
    result.read(prot);
    prot->readMessageEnd();
    ctx->postRead(state.buf()->length());
    if (result.__isset.success) {
      // _return pointer has been filled
      return; // from try_and_catch
    }
    else {
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::MISSING_RESULT, "failed: unknown result");
      return; // from try_and_catch
    }
  }
  );
  if (interior_ew || caught_ew) {
    ctx->handlerError();
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

template <typename Protocol_>
void GossipServiceAsyncClient::recv_joinClusterT(Protocol_* prot, std::set< ::cpp2::GossipState>& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_joinClusterT(prot, _return, state);
  if (ew) {
    ew.throwException();
  }
}

template <typename Protocol_>
void GossipServiceAsyncClient::sendUpdateT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipState& state) {
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "GossipService.sendUpdate", connectionContext_.get());
  GossipService_sendUpdate_pargs args;
  args.state = const_cast< ::cpp2::GossipState*>(&state);
  size_t bufSize = args.serializedSizeZC(prot);
  bufSize += prot->serializedMessageSize("sendUpdate");
  folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
  prot->setOutput(&queue, bufSize);
  auto guard = folly::makeGuard([&]{prot->setOutput(nullptr);});
  try {
    ctx->preWrite();
    prot->writeMessageBegin("sendUpdate", apache::thrift::T_CALL, 0);
    args.write(prot);
    prot->writeMessageEnd();
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = queue.front();
    ctx->onWriteData(smsg);
    ctx->postWrite(queue.chainLength());
  } catch(apache::thrift::TException &ex) {
    ctx->handlerError();
    throw;
  }
  auto eb = this->channel_->getEventBase();
  if(!eb || eb->isInEventBaseThread()) {
    this->channel_->sendRequest(rpcOptions, std::move(callback), std::move(ctx), queue.move());
  }
  else {
    auto mvCb = folly::makeMoveWrapper(std::move(callback));
    auto mvCtx = folly::makeMoveWrapper(std::move(ctx));
    auto mvBuf = folly::makeMoveWrapper(queue.move());
    eb->runInEventBaseThread([this, rpcOptions, mvCb, mvCtx, mvBuf] () mutable {
      this->channel_->sendRequest(rpcOptions, std::move(*mvCb), std::move(*mvCtx), std::move(*mvBuf));
    }
    );
  }
}

template <typename Protocol_>
folly::exception_wrapper GossipServiceAsyncClient::recv_wrapped_sendUpdateT(Protocol_* prot,  ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return state.exceptionWrapper();
  }
  prot->setInput(state.buf());
  auto guard = folly::makeGuard([&] {prot->setInput(nullptr);});
  apache::thrift::ContextStack* ctx = state.ctx();
  std::string fname;
  int32_t protoSeqId = 0;
  apache::thrift::MessageType mtype;
  ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    prot->readMessageBegin(fname, mtype, protoSeqId);
    if (mtype == apache::thrift::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(prot);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::T_REPLY) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("sendUpdate") != 0) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = state.buf();
    ctx->onReadData(smsg);
    GossipService_sendUpdate_presult result;
    result.success = &_return;
    result.read(prot);
    prot->readMessageEnd();
    ctx->postRead(state.buf()->length());
    if (result.__isset.success) {
      // _return pointer has been filled
      return; // from try_and_catch
    }
    else {
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::MISSING_RESULT, "failed: unknown result");
      return; // from try_and_catch
    }
  }
  );
  if (interior_ew || caught_ew) {
    ctx->handlerError();
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

template <typename Protocol_>
void GossipServiceAsyncClient::recv_sendUpdateT(Protocol_* prot,  ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_sendUpdateT(prot, _return, state);
  if (ew) {
    ew.throwException();
  }
}

template <typename Protocol_>
void GossipServiceAsyncClient::sendStatusUpdateT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::cpp2::GossipState& state, const  ::cpp2::GossipState& oldState, const  ::cpp2::GossipState& newState) {
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "GossipService.sendStatusUpdate", connectionContext_.get());
  GossipService_sendStatusUpdate_pargs args;
  args.state = const_cast< ::cpp2::GossipState*>(&state);
  args.oldState = const_cast< ::cpp2::GossipState*>(&oldState);
  args.newState = const_cast< ::cpp2::GossipState*>(&newState);
  size_t bufSize = args.serializedSizeZC(prot);
  bufSize += prot->serializedMessageSize("sendStatusUpdate");
  folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
  prot->setOutput(&queue, bufSize);
  auto guard = folly::makeGuard([&]{prot->setOutput(nullptr);});
  try {
    ctx->preWrite();
    prot->writeMessageBegin("sendStatusUpdate", apache::thrift::T_CALL, 0);
    args.write(prot);
    prot->writeMessageEnd();
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = queue.front();
    ctx->onWriteData(smsg);
    ctx->postWrite(queue.chainLength());
  } catch(apache::thrift::TException &ex) {
    ctx->handlerError();
    throw;
  }
  auto eb = this->channel_->getEventBase();
  if(!eb || eb->isInEventBaseThread()) {
    this->channel_->sendRequest(rpcOptions, std::move(callback), std::move(ctx), queue.move());
  }
  else {
    auto mvCb = folly::makeMoveWrapper(std::move(callback));
    auto mvCtx = folly::makeMoveWrapper(std::move(ctx));
    auto mvBuf = folly::makeMoveWrapper(queue.move());
    eb->runInEventBaseThread([this, rpcOptions, mvCb, mvCtx, mvBuf] () mutable {
      this->channel_->sendRequest(rpcOptions, std::move(*mvCb), std::move(*mvCtx), std::move(*mvBuf));
    }
    );
  }
}

template <typename Protocol_>
folly::exception_wrapper GossipServiceAsyncClient::recv_wrapped_sendStatusUpdateT(Protocol_* prot,  ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return state.exceptionWrapper();
  }
  prot->setInput(state.buf());
  auto guard = folly::makeGuard([&] {prot->setInput(nullptr);});
  apache::thrift::ContextStack* ctx = state.ctx();
  std::string fname;
  int32_t protoSeqId = 0;
  apache::thrift::MessageType mtype;
  ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    prot->readMessageBegin(fname, mtype, protoSeqId);
    if (mtype == apache::thrift::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(prot);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::T_REPLY) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("sendStatusUpdate") != 0) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = state.buf();
    ctx->onReadData(smsg);
    GossipService_sendStatusUpdate_presult result;
    result.success = &_return;
    result.read(prot);
    prot->readMessageEnd();
    ctx->postRead(state.buf()->length());
    if (result.__isset.success) {
      // _return pointer has been filled
      return; // from try_and_catch
    }
    else {
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::MISSING_RESULT, "failed: unknown result");
      return; // from try_and_catch
    }
  }
  );
  if (interior_ew || caught_ew) {
    ctx->handlerError();
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

template <typename Protocol_>
void GossipServiceAsyncClient::recv_sendStatusUpdateT(Protocol_* prot,  ::cpp2::GossipState& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_sendStatusUpdateT(prot, _return, state);
  if (ew) {
    ew.throwException();
  }
}

template <class Protocol_>
uint32_t GossipService_ping_args::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {}
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GossipService_ping_args::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_ping_args");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_ping_args::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_ping_args");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_ping_args::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GossipService_ping_args");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_ping_pargs::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {}
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GossipService_ping_pargs::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_ping_pargs");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_ping_pargs::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_ping_pargs");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_ping_pargs::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GossipService_ping_pargs");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_ping_presult::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {}
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GossipService_ping_presult::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_ping_presult");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_ping_presult::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_ping_presult");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_ping_presult::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GossipService_ping_presult");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_ping_result::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {}
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GossipService_ping_result::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_ping_result");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_ping_result::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_ping_result");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_ping_result::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GossipService_ping_result");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_joinCluster_args::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "self") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipNode>::read(iprot, &this->self);
          this->__isset.self = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GossipService_joinCluster_args::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_joinCluster_args");
  xfer += prot_->serializedFieldSize("self", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipNode>::serializedSize(prot_, &this->self);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_joinCluster_args::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_joinCluster_args");
  xfer += prot_->serializedFieldSize("self", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipNode>::serializedSizeZC(prot_, &this->self);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_joinCluster_args::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GossipService_joinCluster_args");
  xfer += prot_->writeFieldBegin("self", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipNode>::write(prot_, &this->self);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_joinCluster_pargs::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "self") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipNode>::read(iprot, &(*const_cast< ::cpp2::GossipNode*>(this->self)));
          this->__isset.self = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GossipService_joinCluster_pargs::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_joinCluster_pargs");
  xfer += prot_->serializedFieldSize("self", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipNode>::serializedSize(prot_, &(*const_cast< ::cpp2::GossipNode*>(this->self)));
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_joinCluster_pargs::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_joinCluster_pargs");
  xfer += prot_->serializedFieldSize("self", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipNode>::serializedSizeZC(prot_, &(*const_cast< ::cpp2::GossipNode*>(this->self)));
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_joinCluster_pargs::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GossipService_joinCluster_pargs");
  xfer += prot_->writeFieldBegin("self", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipNode>::write(prot_, &(*const_cast< ::cpp2::GossipNode*>(this->self)));
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_joinCluster_presult::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "success") {
        fid = 0;
        ftype = apache::thrift::protocol::T_SET;
      }
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          (*const_cast<std::set< ::cpp2::GossipState>*>(this->success)).clear();
          uint32_t _size65;
          apache::thrift::protocol::TType _etype68;
          xfer += iprot->readSetBegin(_etype68, _size65);
          uint32_t _i69;
          if (_size65 == std::numeric_limits<uint32_t>::max()) {
            for (_i69 = 0; iprot->peekSet(); _i69++) {
               ::cpp2::GossipState _elem70;
              xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::read(iprot, &_elem70);
              (*const_cast<std::set< ::cpp2::GossipState>*>(this->success)).insert(_elem70);
            }
          }
          else {
            for (_i69 = 0; _i69 < _size65; ++_i69) {
               ::cpp2::GossipState _elem71;
              xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::read(iprot, &_elem71);
              (*const_cast<std::set< ::cpp2::GossipState>*>(this->success)).insert(_elem71);
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GossipService_joinCluster_presult::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_joinCluster_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_SET, 0);
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, (*const_cast<std::set< ::cpp2::GossipState>*>(this->success)).size());
    for (auto _iter72 = (*const_cast<std::set< ::cpp2::GossipState>*>(this->success)).begin(); _iter72 != (*const_cast<std::set< ::cpp2::GossipState>*>(this->success)).end(); ++_iter72) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSize(prot_, &(*_iter72));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_joinCluster_presult::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_joinCluster_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_SET, 0);
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, (*const_cast<std::set< ::cpp2::GossipState>*>(this->success)).size());
    for (auto _iter73 = (*const_cast<std::set< ::cpp2::GossipState>*>(this->success)).begin(); _iter73 != (*const_cast<std::set< ::cpp2::GossipState>*>(this->success)).end(); ++_iter73) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSizeZC(prot_, &(*_iter73));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_joinCluster_presult::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GossipService_joinCluster_presult");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_SET, 0);
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRUCT, (*const_cast<std::set< ::cpp2::GossipState>*>(this->success)).size());
    for (auto _iter74 = (*const_cast<std::set< ::cpp2::GossipState>*>(this->success)).begin(); _iter74 != (*const_cast<std::set< ::cpp2::GossipState>*>(this->success)).end(); ++_iter74) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::write(prot_, &(*_iter74));
    }
    xfer += prot_->writeSetEnd();
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_joinCluster_result::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "success") {
        fid = 0;
        ftype = apache::thrift::protocol::T_SET;
      }
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          this->success.clear();
          uint32_t _size75;
          apache::thrift::protocol::TType _etype78;
          xfer += iprot->readSetBegin(_etype78, _size75);
          uint32_t _i79;
          if (_size75 == std::numeric_limits<uint32_t>::max()) {
            for (_i79 = 0; iprot->peekSet(); _i79++) {
               ::cpp2::GossipState _elem80;
              xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::read(iprot, &_elem80);
              this->success.insert(_elem80);
            }
          }
          else {
            for (_i79 = 0; _i79 < _size75; ++_i79) {
               ::cpp2::GossipState _elem81;
              xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::read(iprot, &_elem81);
              this->success.insert(_elem81);
            }
          }
          xfer += iprot->readSetEnd();
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GossipService_joinCluster_result::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_joinCluster_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_SET, 0);
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, this->success.size());
    for (auto _iter82 = this->success.begin(); _iter82 != this->success.end(); ++_iter82) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSize(prot_, &(*_iter82));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_joinCluster_result::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_joinCluster_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_SET, 0);
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, this->success.size());
    for (auto _iter83 = this->success.begin(); _iter83 != this->success.end(); ++_iter83) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSizeZC(prot_, &(*_iter83));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_joinCluster_result::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GossipService_joinCluster_result");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_SET, 0);
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRUCT, this->success.size());
    for (auto _iter84 = this->success.begin(); _iter84 != this->success.end(); ++_iter84) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::write(prot_, &(*_iter84));
    }
    xfer += prot_->writeSetEnd();
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendUpdate_args::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "state") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::read(iprot, &this->state);
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendUpdate_args::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_sendUpdate_args");
  xfer += prot_->serializedFieldSize("state", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSize(prot_, &this->state);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendUpdate_args::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_sendUpdate_args");
  xfer += prot_->serializedFieldSize("state", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSizeZC(prot_, &this->state);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendUpdate_args::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GossipService_sendUpdate_args");
  xfer += prot_->writeFieldBegin("state", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::write(prot_, &this->state);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendUpdate_pargs::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "state") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::read(iprot, &(*const_cast< ::cpp2::GossipState*>(this->state)));
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendUpdate_pargs::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_sendUpdate_pargs");
  xfer += prot_->serializedFieldSize("state", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSize(prot_, &(*const_cast< ::cpp2::GossipState*>(this->state)));
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendUpdate_pargs::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_sendUpdate_pargs");
  xfer += prot_->serializedFieldSize("state", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSizeZC(prot_, &(*const_cast< ::cpp2::GossipState*>(this->state)));
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendUpdate_pargs::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GossipService_sendUpdate_pargs");
  xfer += prot_->writeFieldBegin("state", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::write(prot_, &(*const_cast< ::cpp2::GossipState*>(this->state)));
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendUpdate_presult::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "success") {
        fid = 0;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::read(iprot, &(*const_cast< ::cpp2::GossipState*>(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendUpdate_presult::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_sendUpdate_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSize(prot_, &(*const_cast< ::cpp2::GossipState*>(this->success)));
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendUpdate_presult::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_sendUpdate_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSizeZC(prot_, &(*const_cast< ::cpp2::GossipState*>(this->success)));
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendUpdate_presult::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GossipService_sendUpdate_presult");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::write(prot_, &(*const_cast< ::cpp2::GossipState*>(this->success)));
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendUpdate_result::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "success") {
        fid = 0;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::read(iprot, &this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendUpdate_result::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_sendUpdate_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSize(prot_, &this->success);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendUpdate_result::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_sendUpdate_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSizeZC(prot_, &this->success);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendUpdate_result::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GossipService_sendUpdate_result");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::write(prot_, &this->success);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendStatusUpdate_args::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "state") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "oldState") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "newState") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::read(iprot, &this->state);
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::read(iprot, &this->oldState);
          this->__isset.oldState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::read(iprot, &this->newState);
          this->__isset.newState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendStatusUpdate_args::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_sendStatusUpdate_args");
  xfer += prot_->serializedFieldSize("state", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSize(prot_, &this->state);
  xfer += prot_->serializedFieldSize("oldState", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSize(prot_, &this->oldState);
  xfer += prot_->serializedFieldSize("newState", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSize(prot_, &this->newState);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendStatusUpdate_args::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_sendStatusUpdate_args");
  xfer += prot_->serializedFieldSize("state", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSizeZC(prot_, &this->state);
  xfer += prot_->serializedFieldSize("oldState", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSizeZC(prot_, &this->oldState);
  xfer += prot_->serializedFieldSize("newState", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSizeZC(prot_, &this->newState);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendStatusUpdate_args::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GossipService_sendStatusUpdate_args");
  xfer += prot_->writeFieldBegin("state", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::write(prot_, &this->state);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("oldState", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::write(prot_, &this->oldState);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("newState", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::write(prot_, &this->newState);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendStatusUpdate_pargs::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "state") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "oldState") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "newState") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::read(iprot, &(*const_cast< ::cpp2::GossipState*>(this->state)));
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::read(iprot, &(*const_cast< ::cpp2::GossipState*>(this->oldState)));
          this->__isset.oldState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::read(iprot, &(*const_cast< ::cpp2::GossipState*>(this->newState)));
          this->__isset.newState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendStatusUpdate_pargs::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_sendStatusUpdate_pargs");
  xfer += prot_->serializedFieldSize("state", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSize(prot_, &(*const_cast< ::cpp2::GossipState*>(this->state)));
  xfer += prot_->serializedFieldSize("oldState", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSize(prot_, &(*const_cast< ::cpp2::GossipState*>(this->oldState)));
  xfer += prot_->serializedFieldSize("newState", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSize(prot_, &(*const_cast< ::cpp2::GossipState*>(this->newState)));
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendStatusUpdate_pargs::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_sendStatusUpdate_pargs");
  xfer += prot_->serializedFieldSize("state", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSizeZC(prot_, &(*const_cast< ::cpp2::GossipState*>(this->state)));
  xfer += prot_->serializedFieldSize("oldState", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSizeZC(prot_, &(*const_cast< ::cpp2::GossipState*>(this->oldState)));
  xfer += prot_->serializedFieldSize("newState", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSizeZC(prot_, &(*const_cast< ::cpp2::GossipState*>(this->newState)));
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendStatusUpdate_pargs::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GossipService_sendStatusUpdate_pargs");
  xfer += prot_->writeFieldBegin("state", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::write(prot_, &(*const_cast< ::cpp2::GossipState*>(this->state)));
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("oldState", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::write(prot_, &(*const_cast< ::cpp2::GossipState*>(this->oldState)));
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("newState", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::write(prot_, &(*const_cast< ::cpp2::GossipState*>(this->newState)));
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendStatusUpdate_presult::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "success") {
        fid = 0;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::read(iprot, &(*const_cast< ::cpp2::GossipState*>(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendStatusUpdate_presult::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_sendStatusUpdate_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSize(prot_, &(*const_cast< ::cpp2::GossipState*>(this->success)));
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendStatusUpdate_presult::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_sendStatusUpdate_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSizeZC(prot_, &(*const_cast< ::cpp2::GossipState*>(this->success)));
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendStatusUpdate_presult::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GossipService_sendStatusUpdate_presult");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::write(prot_, &(*const_cast< ::cpp2::GossipState*>(this->success)));
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendStatusUpdate_result::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "success") {
        fid = 0;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::read(iprot, &this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendStatusUpdate_result::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_sendStatusUpdate_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSize(prot_, &this->success);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendStatusUpdate_result::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GossipService_sendStatusUpdate_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::serializedSizeZC(prot_, &this->success);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GossipService_sendStatusUpdate_result::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GossipService_sendStatusUpdate_result");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::GossipState>::write(prot_, &this->success);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift