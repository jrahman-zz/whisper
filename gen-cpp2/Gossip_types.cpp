/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Gossip_types.h"

#include "Gossip_types.tcc"

#include <algorithm>

namespace cpp2 {

GossipStatus _kGossipStatusValues[] = {
  GossipStatus::DOWN_TO_UP,
  GossipStatus::UP_TO_DOWN,
  GossipStatus::UP,
  GossipStatus::DOWN
};

const char* _kGossipStatusNames[] = {
  "DOWN_TO_UP",
  "UP_TO_DOWN",
  "UP",
  "DOWN"
};

const std::map<GossipStatus, const char*> _GossipStatus_VALUES_TO_NAMES(apache::thrift::TEnumIterator<GossipStatus>(4, _kGossipStatusValues, _kGossipStatusNames), apache::thrift::TEnumIterator<GossipStatus>(-1, nullptr, nullptr));
const std::map<const char*, GossipStatus, apache::thrift::ltstr> _GossipStatus_NAMES_TO_VALUES(apache::thrift::TEnumInverseIterator<GossipStatus>(4, _kGossipStatusValues, _kGossipStatusNames), apache::thrift::TEnumInverseIterator<GossipStatus>(-1, nullptr, nullptr));

} // cpp2
namespace apache { namespace thrift {

template <> const char* TEnumTraitsBase< ::cpp2::GossipStatus>::findName( ::cpp2::GossipStatus value) {
  return findName( ::cpp2::_GossipStatus_VALUES_TO_NAMES, value);
}

template <> bool TEnumTraitsBase< ::cpp2::GossipStatus>::findValue(const char* name,  ::cpp2::GossipStatus* outValue) {
  return findValue( ::cpp2::_GossipStatus_NAMES_TO_VALUES, name, outValue);
}

}} // apache::thrift
namespace cpp2 {

AddressFamily _kAddressFamilyValues[] = {
  AddressFamily::IPV6,
  AddressFamily::IPV4
};

const char* _kAddressFamilyNames[] = {
  "IPV6",
  "IPV4"
};

const std::map<AddressFamily, const char*> _AddressFamily_VALUES_TO_NAMES(apache::thrift::TEnumIterator<AddressFamily>(2, _kAddressFamilyValues, _kAddressFamilyNames), apache::thrift::TEnumIterator<AddressFamily>(-1, nullptr, nullptr));
const std::map<const char*, AddressFamily, apache::thrift::ltstr> _AddressFamily_NAMES_TO_VALUES(apache::thrift::TEnumInverseIterator<AddressFamily>(2, _kAddressFamilyValues, _kAddressFamilyNames), apache::thrift::TEnumInverseIterator<AddressFamily>(-1, nullptr, nullptr));

} // cpp2
namespace apache { namespace thrift {

template <> const char* TEnumTraitsBase< ::cpp2::AddressFamily>::findName( ::cpp2::AddressFamily value) {
  return findName( ::cpp2::_AddressFamily_VALUES_TO_NAMES, value);
}

template <> bool TEnumTraitsBase< ::cpp2::AddressFamily>::findValue(const char* name,  ::cpp2::AddressFamily* outValue) {
  return findValue( ::cpp2::_AddressFamily_NAMES_TO_VALUES, name, outValue);
}

}} // apache::thrift
namespace cpp2 {

template uint32_t GossipInterface::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GossipInterface::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipInterface::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipInterface::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipInterface::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GossipInterface::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipInterface::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipInterface::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipInterface::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GossipInterface::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void GossipInterface::__clear() {
  address = std::string();
  port = 0;
  __isset.__clear();
}

bool GossipInterface::operator==(const GossipInterface& rhs) const {
  if (!((address == rhs.address))) {
    return false;
  }
  if (!((port == rhs.port))) {
    return false;
  }
  return true;
}

void swap(GossipInterface& a, GossipInterface& b) {
  using ::std::swap;
  swap(a.address, b.address);
  swap(a.port, b.port);
  swap(a.__isset, b.__isset);
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template uint32_t GossipNode::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GossipNode::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipNode::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipNode::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipNode::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GossipNode::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipNode::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipNode::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipNode::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GossipNode::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void GossipNode::__clear() {
  guid = std::string();
  interfaces.clear();
  currentStatus =  ::cpp2::GossipStatus();
  __isset.__clear();
}

bool GossipNode::operator==(const GossipNode& rhs) const {
  if (!((guid == rhs.guid))) {
    return false;
  }
  if (!((interfaces == rhs.interfaces))) {
    return false;
  }
  if (!((currentStatus == rhs.currentStatus))) {
    return false;
  }
  return true;
}

void swap(GossipNode& a, GossipNode& b) {
  using ::std::swap;
  swap(a.guid, b.guid);
  swap(a.interfaces, b.interfaces);
  swap(a.currentStatus, b.currentStatus);
  swap(a.__isset, b.__isset);
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template uint32_t GossipNodeInstance::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GossipNodeInstance::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipNodeInstance::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipNodeInstance::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipNodeInstance::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GossipNodeInstance::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipNodeInstance::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipNodeInstance::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipNodeInstance::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GossipNodeInstance::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void GossipNodeInstance::__clear() {
  updateTimestamp = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::GossipNode>::clear(&node);
  __isset.__clear();
}

bool GossipNodeInstance::operator==(const GossipNodeInstance& rhs) const {
  if (!((updateTimestamp == rhs.updateTimestamp))) {
    return false;
  }
  if (!((node == rhs.node))) {
    return false;
  }
  return true;
}

void swap(GossipNodeInstance& a, GossipNodeInstance& b) {
  using ::std::swap;
  swap(a.updateTimestamp, b.updateTimestamp);
  swap(a.node, b.node);
  swap(a.__isset, b.__isset);
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template uint32_t GossipState::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t GossipState::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipState::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipState::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GossipState::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t GossipState::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipState::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipState::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GossipState::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t GossipState::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void GossipState::__clear() {
  ::apache::thrift::Cpp2Ops<  ::cpp2::GossipNodeInstance>::clear(&sender);
  liveNodes.clear();
  suspectNodes.clear();
  deadNodes.clear();
  __isset.__clear();
}

bool GossipState::operator==(const GossipState& rhs) const {
  if (!((sender == rhs.sender))) {
    return false;
  }
  if (!((liveNodes == rhs.liveNodes))) {
    return false;
  }
  if (!((suspectNodes == rhs.suspectNodes))) {
    return false;
  }
  if (!((deadNodes == rhs.deadNodes))) {
    return false;
  }
  return true;
}

void swap(GossipState& a, GossipState& b) {
  using ::std::swap;
  swap(a.sender, b.sender);
  swap(a.liveNodes, b.liveNodes);
  swap(a.suspectNodes, b.suspectNodes);
  swap(a.deadNodes, b.deadNodes);
  swap(a.__isset, b.__isset);
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

} // cpp2